[
{
	"uri": "https://veaf.github.io/VEAF-Mission-Creation-Tools/mission-maker/concepts/",
	"title": "Concepts",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://veaf.github.io/VEAF-Mission-Creation-Tools/mission-maker/demo-mission/",
	"title": "Demo mission",
	"tags": [],
	"description": "",
	"content": "Introduction The demo mission is a project in the VEAF GitHub repository that can be forked to serve as the basis of a new mission using the VEAF Mission Creation Tools. It does not include all the features of the tools; for a more in-depth example, you can check the VEAF-Open-Training-Mission repository.\nHow to set up a mission Start by forking or cloning the VEAF-Demo-Mission repository. You can then use the files you cloned as an example, or use your fork to create a new mission.\nThe missions in the VEAF GitHub repository have all been created with this method.\nSet up your shop To set up the mission builder workshop, please refer to this explanation\nMake your mission Simply use the DCS mission editor to edit your mission.\nRefer to the modules specific documentation for more information on how to configure and use each specific feature.\nAlso, you can refer to this explanation for a detailed insight on how the demo mission is set up.\nRemember, you can contact us if you need help:\n we have a very nice forum; you can post in the open International Room you can create issues and pull requests on the GitHub repository our Discord server can be used to chat (both text and voice) with the VEAF members and developpers; we\u0026rsquo;re nice people and some of us even speak english ^^ you can send emails to the VEAF; they won\u0026rsquo;t be read everyday, so please try and use one of the other communication mediums.  "
},
{
	"uri": "https://veaf.github.io/VEAF-Mission-Creation-Tools/mission-maker/concepts/load-with-triggers/",
	"title": "Load scripts in the mission",
	"tags": [],
	"description": "",
	"content": "Introduction In a mission using the VEAF Mission Creation Tools, the script have to be loaded through triggers. This chapter will explain how to setup such triggers, and also how to use a dynamic loading method for development.\nTo load a script in a DCS mission, the easiest way is to create a MISSION START trigger, and make it execute a DO SCRIPT FILE action, loading the script.\nIf you do this for all the community and veaf scripts, they will be stored in the mission file (in the \u0026ldquo;I10N\\default\u0026rdquo; folder) and referenced for loading. This way, the mission is completely autonomous (all the need scripts are stored inside).\nThen, the build.cmd command will construct the mission file from the sources and copy all the community and veaf scripts (the version that is in the VEAF-Mission-Creation-Tools npm repository) inside.\nThe compiled mission will work and still be autonomous.\nBut there is a catch : everytime you make a change to a script (either because you\u0026rsquo;re developping a new functionnality in a veaf module, or because you are editing a configuration script for your mission), it\u0026rsquo;s a pain to import it in the mission for testing. You need to modify your trigger, open the script file again (if running from the mission editor), or copy your files to the VEAF Mission Creation Tools repository (which is not always possible).\nThere is a way of loading the scripts dynamically, meaning that they will be loaded from where they are stored on your disk.\nThis was first demonstrated by thebgpikester in his YouTube video.\nThe basics Here are the triggers we\u0026rsquo;re gonna create in the mission; we\u0026rsquo;ll see each one of them in details below.\nchoose - static or dynamic The first trigger will allow us to choose between static and dynamic loading easily, as well as define the location of the scripts on our disk. Of course, the latter differs from one person to another, and therefore it must be adapted if you want to use dynamic loading.\nThe name of the trigger is not important, as is its color.\nIt has a condition (a lua predicate) return true --true=dynamic, false=static: if the condition returns true, the trigger will be executed and the scripts will be loaded dynamically. If false, the trigger will not be executed and the scripts will be loaded statically. At the moment, the condition returns true and therefore we\u0026rsquo;ll be loading dynamically.\nThe trigger does execute a script (DO SCRIPT) that defines two constants, used later in the other triggers :\nVEAF_DYNAMIC_PATH = \u0026#39;D:/DEV/VEAF-Mission-Creation-Tools\u0026#39;\rVEAF_DYNAMIC_MISSIONPATH = \u0026#39;D:/DEV/VEAF-Demo-Mission\u0026#39;\rBear in mind that these paths are probably not correct for your environment. If needed, change them.\nmission start - dynamic This one has a condition:\nreturn VEAF_DYNAMIC_PATH~=nil\rThis means that it will be executed if the VEAF_DYNAMIC_PATH constant has been defined, hence only if the first trigger is activated.\nIt will load the community scripts (one by one), with code like this:\nlocal script = VEAF_DYNAMIC_PATH .. \u0026#34;/scripts/community/mist.lua\u0026#34;\rassert(loadfile(script))()\rIt will also load all the veaf scripts dynamically with this code:\nenv.info(\u0026#34;DYNAMIC LOADING\u0026#34;)\rlocal script = VEAF_DYNAMIC_PATH .. \u0026#34;/scripts/VeafDynamicLoader.lua\u0026#34;\rassert(loadfile(script))()\rmission start - static This is the opposite of the previous trigger : it will be executed only if the VEAF_DYNAMIC_PATH constant has not been defined.\nHere\u0026rsquo;s the condition:\nreturn VEAF_DYNAMIC_PATH==nil\rWhen executed, it simply loads all the veaf scripts using DO SCRIPT FILE statements.\nmission config - dynamic This is the same trigger that mission start - dynamic, except that is it made for loading the mission scripts (in this case, only missionConfig.lua)\nIt has the same condition:\nreturn VEAF_DYNAMIC_PATH~=nil\rAnd its code does this:\nenv.info(\u0026#34;DYNAMIC CONFIGURATION\u0026#34;)\rlocal script = VEAF_DYNAMIC_MISSIONPATH .. \u0026#34;/src/scripts/missionConfig.lua\u0026#34;\rassert(loadfile(script))()\rmission config - static Again, the same trigger than mission start - static, except that is it made for loading the mission scripts (in this case, only missionConfig.lua)\nSame condition:\nreturn VEAF_DYNAMIC_PATH==nil\rWhen executed, it simply loads the mission scripts using DO SCRIPT FILE statements.\nUsage Choose between static and dynamic loading During the development of your mission, it\u0026rsquo;s easier to select dynamic loading. To do this, modify the condition of the first trigger (choose - static or dynamic) so it returns true:\nreturn true\rWhen publishing your mission, ensure that you selected static loading by modifying the condition of the first trigger (choose - static or dynamic) so it returns false:\nreturn false\rUse dynamic loading When your mission is setup to dynamically load its scripts, it loads them each time it starts, from their original location on your disk. This means that every change you make to the scripts will be immediately available in your mission the next time you start it. The easiest way to restart a running mission is to press the \u0026ldquo;Left-Shift + R\u0026rdquo; key combination.\nMiscelleanous Building the mission and dynamic loading The extract.cmd script will automatically change from a dynamic loading to a static loading, to ensure that the mission is never published with dynamic loading (it wouldn\u0026rsquo;t work). To do this, the script replaces the return true --true=dynamic, false=static with return false --true=dynamic, false=static in the mission before storing it.\nDebugging and tracing When using dynamic loading, the error messages will refer to the scripts by their actual filename, making it easier to debug.\nAlso, the VeafDynamicLoader.lua script will set debugging and tracing to ON, so when trying out your mission you\u0026rsquo;ll see all your trace messages (and mine).\nWhen building, the scripts will automaticall be edited to remove any debugging or tracing call, saving some CPU time for the game itself.\n"
},
{
	"uri": "https://veaf.github.io/VEAF-Mission-Creation-Tools/mission-maker/",
	"title": "Mission maker",
	"tags": [],
	"description": "",
	"content": "Introduction With these tools offered free of charge by the Virtual European Air Force, any mission maker can easily create a complex, dynamic mission in the DCS mission editor. In as little as 1 or 2 hours, you will have a mission with :\n a complex setup of dozens of units, easily added by using special templating commands. a system that dresses up FARP units to make them complete forwards bases of operations, with the required logistic vehicles, tents, guards and even windsocks a build system that will normalize your mission files so they aren\u0026rsquo;t completely randomized and shuffled each time you edit them with the DCS editor. a radio presets frequencies injector; it\u0026rsquo;ll use a template to set all the radio presets in the players planes. a player-controlled radio menu to control this mission at runtime. a robust, easy-to-setup security system that can restrict certain features to specific user groups. a Zeus-like system that can be used to spawn AI groups, convoys and units at runtime. a carrier vehicle that can automatically navigate upwind when requested by the players, and automatically return to its initial location afterwards; it can also manage a rescue helicopter on station (port side of the ship), and a S3-B emergency tanker. a ground attack mission system; this will generate a ground attack mission when requested, and create the radio menus needed to control it. a helo transport mission system; this will generate a helicopter transport mission when requested, and create the radio menus needed to control it.  Prerequisites There are two sets of prerequisites to use the VEAF Mission Creation Tools. First, if you simply want to use them in your missions, then you\u0026rsquo;ll need :\n DCS World (of course) mist.lua (provided in the community folder)  But if you want to use the full development environment, and take advantage of the advanced features (normalization, injection), and easily publish your mission to a source control system (e.g. GitHub), you\u0026rsquo;ll also need :\n git an IDE (notepad++, visual studio code\u0026hellip;) npm - for that install node.js 7za from the 7-Zip Extra: standalone console version lua from Lua for Windows  How to set up a mission You can clone the VEAF-Demo-Mission repository and use it as an example (or fork it and create a new mission from your fork). Then you should read the readme.md file in this repository. It will explain how you should setup your development environment. There is detailed documentation for all the modules (see menu on the left).\nIf you choose to start with a new mission (and not clone our demo mission), the important point is to load and initialize the scripts.\nStart by adding a new \u0026ldquo;mission start\u0026rdquo; trigger; it should be the first trigger\nThis trigger (1) must be of type \u0026ldquo;mission start\u0026rdquo; (2), and it should load all the scripts (3).\nHere is the list of scripts to load, in the correct order:\n \u0026hellip; (MiST is mandatory, and must be the very first to load) mist.lua \u0026hellip; (all the non-mandatory, external scripts) CTLD.lua (CTLD is not mandatory) WeatherMark.lua (WeatherMark is not mandatory) \u0026hellip; (now the VEAF scripts, in the order of their dependencies) veaf.lua (the main library, must be the first of the VEAF scripts) dcsUnits.lua (mandatory) veafUnits.lua (mandatory) veafMarkers.lua (mandatory) veafRadio.lua (mandatory) veafSecurity.lua (mandatory) veafSpawn.lua (mandatory) veafAssets.lua (used in other scripts) veafCasMission.lua (used in other scripts) veafNamedPoints.lua (used in other scripts) veafCarrierOperations.lua (not mandatory) veafCombatZone.lua (not mandatory) veafGrass.lua (not mandatory) veafMove.lua (not mandatory) veafTransportMission.lua (not mandatory) veafInterpreter.lua (not mandatory) \u0026hellip;(now the configuration scripts) veafAssetsConfig.lua veafAutogftConfig.lua veafCTLDConfig.lua veafCombatZoneConfig.lua veafNamedPointsConfig.lua veafSecurityConfig.lua  Then, it should run the following initialization code:\nveafRadio.initialize()\rveafAssets.initialize()\rveafCasMission.initialize()\rveafGrass.initialize()\rveafMove.initialize()\rveafSpawn.initialize()\rveafCarrierOperations.initialize()\rveafTransportMission.initialize()\rveafNamedPoints.initialize()\rveafSecurity.initialize()\rveafCombatZone.initialize()\rveafInterpreter.initialize()\rctld.initialize() -- only needed if you use CTLD\r Then, for each script that you use (and its dependencies), you should read the specific documentation and find out how to use and configure it.\n"
},
{
	"uri": "https://veaf.github.io/VEAF-Mission-Creation-Tools/mission-programmer/",
	"title": "Mission programmer",
	"tags": [],
	"description": "",
	"content": "Introduction TODO\n"
},
{
	"uri": "https://veaf.github.io/VEAF-Mission-Creation-Tools/mission-maker/concepts/radiomenus/",
	"title": "Radio menus",
	"tags": [],
	"description": "",
	"content": "Some of the VEAF Tools scripts add entries to the DCS communication menu (a.k.a the radio menu).\nThis is the tree-like menu that the player can use to communicate with ATC, the AWACS, the ground crew and other actors in the DCS mission.\nThe last option in the main menu is always \u0026ldquo;F10. Other\u0026rdquo;. All the custom radio menus will be grouped here.\nSo, in order for the player to interact with the VEAF scripts using the radio menu, s·he will have to:\n press the \u0026ldquo;communication menu\u0026rdquo; key (default is \u0026ldquo;*\u0026quot;) press F10 to open the \u0026ldquo;F10. Other\u0026rdquo; menu find out what function key is linked to the VEAF menu (it depends on its position in the list) and press it interact with the different modules (each has its own submenu in the VEAF menu) in the same way  "
},
{
	"uri": "https://veaf.github.io/VEAF-Mission-Creation-Tools/",
	"title": "VEAF Mission Creation Tools",
	"tags": [],
	"description": "",
	"content": "Introduction The VEAF Mission Creation Tools contains tools and scripts designed to make it easy to create, share and maintain dynamic missions.\nIt is composed of:\n the VEAF scripts (modules) the community scripts, sometimes edited by VEAF a mission creation, edition and publication workflow tools to support this workflow this documentation  Roles When you have an interest in the VEAF Mission Creation Tools, you may be a mission programmer or a mission maker.\nMission makers want to use the tools to create, share and maintain a mission.\nMission programmers help us maintain and enhance the tools by adding features, correcting bugs, configuring new data.\nHow to use the tools as a mission maker Please have a look at the Misson Maker documentation.\nFor those looking for a quick start, read the demo mission page to learn how you can fork the demo repository and create your own mission.\nHow to participate to the development of the tools The Misson Programmer documentation details all you need to know about that.\nYou can contact us, we\u0026rsquo;ll guide you into our community.\nWorkflow All missions that use the VEAF Mission Creation Tools share some base concepts:\n they integrate (some of) the VEAF and community scripts in a load trigger they initialize and configure these scripts in another trigger they share a few conventions when naming units and groups  This is easier if the mission folder is organized like that:\n src - all the mission source files src/mission - the mission definition (the lua files created by the DCS mission editor and originally compressed into a zipped .miz file) src/scripts - (optional) the custom scripts used to configure the VEAF modules specifically for this mission src/radioSettings.lua - (optional) the radio frequencies that will be injected build.cmd - the build script is responsible for creating the .miz file that will contain all the lua definitions, the scripts, the configuration files, etc. extract.cmd - this script will extract the lua definition files from a .miz file freshly edited with the DCS mission editor package.json - this allows the build and extract scripts to download the latest version of the VEAF Mission Creation Tools  The easiest way to create such a folder is to fork the demo mission provided by us (please read the demo mission page).\nWhen working on the mission, always follow this workflow:\nFirst, create a mission in the DCS mission editor, and save it in the main folder of your mission (alongside the build and extract scripts)\n run the extract script to put all the lua definition files in the src folder edit the configuration scripts, the radio presets configuration, update the VEAF Mission Creation Tools, etc. run the build script to assemble all the scripts, the configuration files, and the mission into a .miz file; it\u0026rsquo;ll be generated in the build folder edit the .miz file with the DCS mission editor -\u0026gt; back to step 1; rinse and repeat.  Questions, feature requests, bug reports There are several ways of getting in touch with the VEAF:\n we have a very nice forum; you can post in the open International Room you can create issues and pull requests on the GitHub repository our Discord server can be used to chat (both text and voice) with the VEAF members and developpers; we\u0026rsquo;re nice people and some of us even speak english ^^ you can send emails to the VEAF; they won\u0026rsquo;t be read everyday, so please try and use one of the other communication mediums.  Hall of fame  David \u0026ldquo;Zip\u0026rdquo; Pierron, VEAF Frédéric \u0026ldquo;Coubystark\u0026rdquo; Coubard, VEAF \u0026ldquo;Mitch\u0026rdquo;, VEAF  "
},
{
	"uri": "https://veaf.github.io/VEAF-Mission-Creation-Tools/mission-maker/concepts/usermarks/",
	"title": "User marks",
	"tags": [],
	"description": "",
	"content": "A lot of the VEAF Mission Creation Tools functionalities are controlled through commands entered in the text of user marks on the F10 map.\nThis means that, during runtime, a player can go to the F10 map and create a user mark\nIn this mark, the player enters a text that the VEAF Tools scripts will understand. Of course, it has to follow a specific syntax (see the documentation of the modules) for more detail.\nExample : _spawn group, name US infgroup, country USA\nThe command is sent to the scripts everytime the content of the marker changes:\n at first, when the player entered some content and then clicked outside of the maker windows each time the text in the marker is modified and the player clicks outside of the maker windows  A lot of modules are programmed to delete the marker as soon as its command is recognized and interpreted, so the second point is often moot.\n"
},
{
	"uri": "https://veaf.github.io/VEAF-Mission-Creation-Tools/mission-maker/concepts/externalscripts/",
	"title": "External scripts",
	"tags": [],
	"description": "",
	"content": "The VEAF Mission Creation Tools contains .lua scripts that are meant to be ran inside a DCS mission, and also other scripts that are meant to run outside a mission.\nThese scripts are mainly used in the mission building and extraction pipelines (see workflow).\nNormalizer DCS mission editor saves the mission data as a set of .lua files compressed in the .miz mission file.\n mission - contains the details of the mission, including all the groups and units. This is the most important file. theatre - the name of the map where the mission takes place options - a set of options enforced in the mission warehouses - data about the fuel and munitions providers in the mission l10n/DEFAULT/dictionary - all the names of all the mission objects, mapped to arbitrary keys used in the other files l10n/DEFAULT/mapResource - all the other files of the mission are listed here  Unfortunately, due to the way lua handles tables and to the way the mission editor is programmed, there is a good chance the content of these lua files is completely shuffled everytime a mission is saved, even if the change is small.\nThis makes comparing two versions of a mission difficult, and merging concurrent editions in a source control system (e.g. GIT) all but impossible.\nThe veafMissionNormalizer script can be used in the extraction pipeline (extract.cmd) to normalize the output of the DCS mission editor; this means that the data inside the lua files is sorted and written in a predefined way (always the same).\nIt is way easier to pinpoint modifications in the resulting lua files than in the raw DCS mission editor files.\nExample of use:\n a user edits the mission and saves it the normalizer is ran (e.g. via the extract.cmd command) and the files are cleaned up the files are stored in the source control system (e.g. GIT) another user edits the mission and saves it the normalizer is ran (e.g. via the extract.cmd command) and the files are cleaned up the user compares the resulting files with the last version in the source control repository and (hopefully) finds his edit  Radio preset frequencies injector A lot of planes in DCS can use presets in their onboard radios. This makes it easy to share a pre-briefed frequency plan (a.k.a. crystallization) among players.\nUnfortunately, editing these presets in the DCS mission editor, and maintaining the crystallization, is hard.\nThe VEAF radio preset frequencies injector is a lua script that can be run in the build and/or the extract pipelines.\nIt parses the mission files, and uses an internal database to find out how to configure the planes in the mission.\nThe configuration is stored in a mission-specific lua file and its syntax is simple.\nIt\u0026rsquo;s a single table called radioSettings, that contains entries (freely named) which can specify a unit type, a coalition and/or a country.\nWhen the script runs, each unit in the mission is tested against the data in this table, and if it matches one of the entries then it\u0026rsquo;s processed. When processing a unit, its radio configuration is replaced with the one in the radioSettings entry\nExample:\nradioSettings = {\r[\u0026#34;blue F-14B\u0026#34;] = {\r[\u0026#34;type\u0026#34;] = \u0026#34;F-14B\u0026#34;,\r[\u0026#34;coalition\u0026#34;] = \u0026#34;blue\u0026#34;,\r[\u0026#34;Radio\u0026#34;] = {\r[1] = {\r[\u0026#34;channels\u0026#34;] = {\r[1] = 243,\r...\r[20] = 271.7,\r}, -- end of [\u0026#34;channels\u0026#34;]\r [\u0026#34;modulations\u0026#34;] = {\r[1] = 0,\r...\r[20] = 0,\r}, -- end of [\u0026#34;modulations\u0026#34;]\r }, -- end of [1]\r }, -- end of [\u0026#34;Radio\u0026#34;]\r In this example, all the blue units of type F-14B will be configured with these radio settings. F-14 in other coalitions and other unit types will not be processed.\nOther example:\nradioSettings = {\r[\u0026#34;Ka-50\u0026#34;] = {\r[\u0026#34;type\u0026#34;] = \u0026#34;Ka-50\u0026#34;,\r[\u0026#34;Radio\u0026#34;] = {...}\rAll the Ka-50 in the mission will be processed, regardless of their coalition.\nDCS data exporter TODO\n"
},
{
	"uri": "https://veaf.github.io/VEAF-Mission-Creation-Tools/mission-maker/modules/",
	"title": "Modules",
	"tags": [],
	"description": "",
	"content": "This chapter lists and documents the VEAF scripts that constitute the VEAF Mission Creation Tools.\n"
},
{
	"uri": "https://veaf.github.io/VEAF-Mission-Creation-Tools/mission-maker/modules/veafassets/",
	"title": "veafAssets",
	"tags": [],
	"description": "",
	"content": "Introduction This module creates a radio menu (VEAF / ASSETS) that allows the players to manage the mission air assets.\nFor each air asset, they can request information (is the asset alive ? What information has the mission maker set up - radio frequencies, TACANs, etc.), respawn the asset (and its eventual linked DCS groups, e.g. escort planes for a High Value Target), dispose of the asset (if set up by the mission maker).\nHow to set up a mission Let\u0026rsquo;s start by saying that you can clone the VEAF-Demo-Mission repository and use it as an example (or fork it and create a new mission from your fork).\nLoad the script and its prerequisites In DCS mission editor, set up a \u0026ldquo;mission start\u0026rdquo; trigger that will :\n load the following scripts (in order) :  mist.lua (from the community folder) veaf.lua veafRadio.lua veafAssets.lua   run the following lua code : veafRadio.initialize();veafAssets.initialize(); load a new file that you\u0026rsquo;ll write, and that will initialize the veafAsset script specifically for your mission ; usually it\u0026rsquo;s called veafAssetsConfig.lua, and if you follow our model (VEAF-Demo-Mission) it\u0026rsquo;s stored in the scripts folder of your mission.  How to configure the script in a mission The veafAssetsConfig.lua file will declare a table, listing all the assets in your mission along with the information you want the players to receive.\nHere\u0026rsquo;s a annotated example:\nveafAssets.Assets = {\r-- list the assets common to all missions below\r {sort=1, name=\u0026#34;Arco\u0026#34;, description=\u0026#34;Arco (KC-135)\u0026#34;, information=\u0026#34;Tacan 11Y\\nVHF 130.4 Mhz\\nZone OUEST\u0026#34;, linked={\u0026#34;Arco-escort1\u0026#34;,\u0026#34;Arco-escort2\u0026#34;}},\r{sort=2, name=\u0026#34;Petrolsky\u0026#34;, description=\u0026#34;900 (IL-78M, RED)\u0026#34;, information=\u0026#34;VHF 267 Mhz\u0026#34;, linked=\u0026#34;Petrolsky-escort\u0026#34;}, {sort=3, name=\u0026#34;Mig-28\u0026#34;, description=\u0026#34;Mig-29x2 (dogfight zone, RED)\u0026#34;, disposable=true, information=\u0026#34;They spawn near N41° 09\u0026#39; 31\\\u0026#34;E043° 05\u0026#39; 08\\\u0026#34;\u0026#34;},\r}\rveafAssets.logInfo(\u0026#34;Setting move tanker radio menus\u0026#34;)\rtable.insert(veafMove.Tankers, \u0026#34;Arco\u0026#34;)\rtable.insert(veafMove.Tankers, \u0026#34;Petrolsky\u0026#34;)\rIn this code, we define 3 assets.\nFirst, Arco (the name attribute must contain the name of the group in DCS) is a tanker, described by \u0026ldquo;Arco (KC-135)\u0026rdquo; (the description field is the name that will appear in the radio menu). It has information that players can request freely (in the information attribute); it also has two linked DCS groups (not listed in the assets list, although they could be) : Arco-escort1 and Arco-escort2 (these are the name of the groups in DCS). When the players choose to respawn Arco, these linked groups will also automatically be respawned.\nPetrolsky has the same characteristics, except that it has a single linked group, described using the concise syntax (a single string instead if a list).\nMig-28 is an aggressor F5 (of course) which is disposable. It means that the player can choose not only to respawn it when they want to, but also to dispose of it when they don\u0026rsquo;t want to play with it anymore. In this particular case (an AI aggressor plane), the mission maker should put it in the mission with the \u0026ldquo;Late activation\u0026rdquo; setting checked, so it is only spawned when players respawn it with this script.\nThen, we add the two tanker assets to the veafMove.Tankers table. When the veafMove.initialze() function is called later, it will use this table to create specific \u0026ldquo;Move tanker to me\u0026rdquo; commands in the radio menu.\nHow to use in a mission The radio menu will list all the assets defined in the veafAssets.Assets table, and for each asset add submenus :\n respawn the asset and its linked groups info shows information about the asset, if provided in the information tag dispose disposes of the asset if disposable is set to true  "
},
{
	"uri": "https://veaf.github.io/VEAF-Mission-Creation-Tools/mission-maker/modules/veafgrass/",
	"title": "veafGrass",
	"tags": [],
	"description": "",
	"content": "Introduction This module helps place a Forward Armament and Refuel Point (FARP) in a mission. It also helps with grass runways (hence its name). The mission creator simply has to place one or few units in the DCS mission editor, and name them following a specific convention; the script will then automatically find and dress these units up at mission start.\nHow to set up a mission Let\u0026rsquo;s start by saying that you can clone the VEAF-Demo-Mission repository and use it as an example (or fork it and create a new mission from your fork).\nLoad the script and its prerequisites In DCS mission editor, set up a \u0026ldquo;mission start\u0026rdquo; trigger that will :\n load the following scripts (in order) :  mist.lua (from the community folder) veaf.lua veafGrass.lua   run the following lua code : veafGrass.initialize();  Place the units in the mission There are two naming conventions that you can use with this script:\n units with \u0026ldquo;FARP \u0026quot; in their name will trigger the creation of a FARP; tents and other static objects like generators, ammo dumps, a windsock will be placed around the unit; supply vehicles (mandatory for rearming, refueling and getting external power) will be spawned; the FARP will also be added to the named points database (see namedPoints) units with \u0026ldquo;GRASS_RUNWAY\u0026rdquo; in their name will trigger the creation of a grass runway by replicating the unit to form two parallel lines, add a guard tower, a windsock and also add the grass runway to the named points database (see namedPoints)  How to use in a mission Nothing to do ; at mission start the script will automatically run, and then the FARPs and grass runways will be available for the players.\n"
},
{
	"uri": "https://veaf.github.io/VEAF-Mission-Creation-Tools/mission-maker/modules/veafcarrieroperations/",
	"title": "veafCarrierOperations",
	"tags": [],
	"description": "",
	"content": "Introduction This module creates a radio menu (VEAF / CARRIER OPERATIONS) that allows the players to manage the aircraft carriers (CV) in the mission, at runtime.\nFor each CV, they can get information (including ATC) and start/end carrier air operations (CAO). During CAO, the CV will sail into the wind at a speed and heading computed to get a specific wind speed right in front of the runway. A rescue helicopter (Pedro) and an emergency tanker can be placed in the mission and will be launched and recovered at appropriate times. After some time (45 or 90 minutes), it will automatically sail at flank speed to its initial position.\nHow to set up a mission Let\u0026rsquo;s start by saying that you can clone the VEAF-Demo-Mission repository and use it as an example (or fork it and create a new mission from your fork).\nLoad the script and its prerequisites In DCS mission editor, set up a \u0026ldquo;mission start\u0026rdquo; trigger that will :\n load the following scripts (in order) :  mist.lua (from the community folder) veaf.lua veafRadio.lua veafCarrierOperations.lua   run the following lua code : veafRadio.initialize();veafCarrierOperations.initialize();  How to configure the script in a mission The name that is given to the CV is central to all the configuration of this module. For example, let\u0026rsquo;s consider a John C. Stennis aircraft carrier steaming along its escort group.\n the DCS group is named \u0026ldquo;CSG-74 Stennis\u0026rdquo; (Carrier Strike Group) the aircraft carrier (DCS unit) is named \u0026ldquo;CVN-74 Stennis\u0026rdquo; (Cruiser Voler Nuclear, the acronym used by americans for their nuclear aircraft carriers) the Pedro helicopter (DCS unit) is aptly named \u0026ldquo;CVN-74 Stennis Pedro\u0026rdquo; the S3-B tanker (DCS unit) is named \u0026ldquo;CVN-74 Stennis S3B-Tanker\u0026rdquo;  The script first searches for aircraft carriers in the mission. For each aircraft carriers, it searches for units with the same name concatenated with \u0026quot; Pedro\u0026rdquo; (these are the rescue helos) and with \u0026quot; S3B-Tanker\u0026rdquo; (these are the emergency tankers)\nHow to use in a mission Use the radio menus to :\n start the carrier air operations (CAO) for a specific carrier, either for 45 or 90 minutes (available only when they are not yet started) stop the CAO (available only when they are started) request information (ATC, recovery bearing, etc.)  "
},
{
	"uri": "https://veaf.github.io/VEAF-Mission-Creation-Tools/mission-maker/modules/veafunits/",
	"title": "veafUnits",
	"tags": [],
	"description": "",
	"content": "Introduction This module allows the user to define groups that can be spawned in a mission using either the veafSpawn, the veafInterpreter or the veafCombatZone modules. It is also possible to define aliases for units that will be used in groups, or spawned directly.\nHow to set up a mission Let\u0026rsquo;s start by saying that you can clone the VEAF-Demo-Mission repository and use it as an example (or fork it and create a new mission from your fork).\nLoad the script and its prerequisites In DCS mission editor, set up a \u0026ldquo;mission start\u0026rdquo; trigger that will :\n load the following scripts (in order) :  mist.lua (from the community folder) veaf.lua veafUnits.lua any module that you\u0026rsquo;ll use to spawn the groups (veafSpawn, veafInterpreter or veafCombatZone)   run the following lua code : veafUnits.initialize();  You can use the groups defined in the veafUnits.lua script, or define your own groups by creating a mission-specific file :\n load a new file that you\u0026rsquo;ll write, and that will add entries in the veafUnits databases specifically for your mission ; usually it\u0026rsquo;s called veafUnitsConfig.lua, and if you follow our model (VEAF-Demo-Mission) it\u0026rsquo;s stored in the scripts folder of your mission.  How to configure the script in a mission The veafUnitsConfig.lua file will add entries to the veafUnits.UnitsDatabase and/or veafUnits.GroupsDatabase tables\nHere\u0026rsquo;s a annotated example:\ntable.insert(veafUnits.UnitsDatabase, {\raliases = {\u0026#34;sa15\u0026#34;, \u0026#34;sa-15\u0026#34;},\runitType = \u0026#34;Tor 9A331\u0026#34;,\r})\rIn this code, we add aliases for the Tor SAM system (more on the syntax later).\ntable.insert(veafUnits.GroupsDatabase, {\raliases = {\u0026#34;rapier_optical\u0026#34;, \u0026#34;rpo\u0026#34;},\rgroup = {\rdisposition = { h= 3, w= 5},\runits = {{\u0026#34;rapier_fsa_optical_tracker_unit\u0026#34;, cell = 13}, {\u0026#34;rapier_fsa_launcher\u0026#34;, cell = 1}, {\u0026#34;rapier_fsa_launcher\u0026#34;, cell = 5}},\rdescription = \u0026#34;Rapier SAM site\u0026#34;,\rgroupName = \u0026#34;Rapier\u0026#34;\r},\r})\rIn this code, we add a group called rpo or rapier_optical that contains 3 units (more on the syntax later).\nUnit aliases syntax The syntax of an entry in the veafUnits.UnitsDatabase is quite simple. Example :\n{\raliases = {\u0026#34;sa15\u0026#34;, \u0026#34;sa-15\u0026#34;},\runitType = \u0026#34;Tor 9A331\u0026#34;,\r}\rAn entry is composed of 2 elements :\n the aliases keyword defines a list of aliases that can be used to refer to the unit the unitType keyword specifies which DCS unit is referred to from the list defined in dcsUnits.lua (not very up-to-date).  Group definition syntax A group is a list of units that are used together to form a usable battle group.\nIt has a layout template, used to make the group units spawn at the correct place and heading. The syntax of an entry in the veafUnits.GroupsDatabase is much more complex than a simple alias. Example :\n{\raliases = {\u0026#34;Tarawa\u0026#34;},\rgroup = {\rdisposition = { h = 3, w = 3},\runits = { {\u0026#34;tarawa\u0026#34;, 2}, {\u0026#34;PERRY\u0026#34;, 7}, {\u0026#34;PERRY\u0026#34;, 9} },\rdescription = \u0026#34;Tarawa battle group\u0026#34;,\rgroupName = \u0026#34;Tarawa\u0026#34;,\r}\r}\rSyntax aliases The aliases keyword defines a list of aliases that can be used to refer to the group.\nExample :\naliases = {\u0026#34;sa2\u0026#34;, \u0026#34;sa-2\u0026#34;, \u0026#34;fs\u0026#34;},\rdisposition The disposition keyword defines the group layout template (see explanation of group layouts below).\nExample :\ndisposition = { h= 6, w= 8},\runits The units keyword defines a list of all the units composing the group.\nExample :\nunits = {\r{\u0026#34;IFV Hummer\u0026#34;, cell = 1, fitToUnit},\r{\u0026#34;Truck Predator GCS\u0026#34;, cell = 3, hdg = 225},\r{\u0026#34;Truck M 818\u0026#34;, number = 4, random},\r{\u0026#34;Truck M978 HEMTT Tanker\u0026#34;, number = {min=0, max=3}, random},\r},\r the first element of the unit table is always the unit type, either from the dcsUnits database, or from an alias in veafUnits.UnitsDatabase. the position of the unit is either specified with the cell parameter (containing the cell number), or left as random if the cell keyword is omitted. the random parameter, if set, means that the unit will be placed randomly in the cell, leaving a one unit size margin around. the hdg parameter, if set, fixes the unit heading (in degrees, from 0 to 359); when not set, unit heading is random. the number parameter is used to spawn multiple units in several cells; it cannot be combined with the cell parameter, of course, and can either be a fixed number or an interval from which the actual number of units will be chosen randomly. fitToUnit, when specified, makes the cell shrink around the unit ; it will not be a square but a rectangle of the unit\u0026rsquo;s exact size (plus the spacing, if set)  description the description keyword contains a human-friendly name for the group that will be used in lists (e.g. in the list all groups radio menu of veafSpawn).\ngroupName the groupName keyword defines the DCS group name used when spawning this group (will be completed with a numerical suffix)\nGroup layout grid and placement algorithm A group template is defined relative to a grid, composed of cells, numbered from left to right and top to bottom :\nThe units in the group will be spawned in their respective cell, or sequentially from the top-left cell if no preferred cell is set.\nLet\u0026rsquo;s describe the algorithm so everything is clear.\nStep 1 First, a layout defines the number of cells (height and width) for the group. At the moment the cells measure by default 10m x 10m. The disposition keyword defines this layout. Here\u0026rsquo;s an example with the Tarawa group defined above :\ndisposition = { h = 3, w = 3},\rStep 2 Then, when a unit is placed in a cell, this cell size grows to accomodate the unit\u0026rsquo;s size.\nWe can add a spacing parameter (in the spawn method call) if needed, to allow for some freedom inside the cells. When set, the size of the cell will be expanded by the size of the unit times the spacing parameter.\nLet\u0026rsquo;s continue with our example ; here the Tarawa itself is placed in cell #2 :\nunits = { {\u0026#34;tarawa\u0026#34;, 2} ... },\rStep 3 This process continues until all the units are placed.\nIn our example, we still have to place 2 Perry frigates in cells #7 and #9 :\nunits = { ... {\u0026#34;PERRY\u0026#34;, 7}, {\u0026#34;PERRY\u0026#34;, 9} },\rStep 4 At the end of the process, we need to compute the size of the rectangle that contains all the group units.\nContinuing with our example :\nAnd we can actually spawn all the units at the center of each cell, with a random variation if the random parameter was set\nActual examples A seemingly realistic russian air defense batteries {\raliases = {\u0026#34;RU-SAM-Shilka-Battery\u0026#34;},\rgroup = {\rdisposition = { h= 5, w= 5},\runits = {\r-- the search radar\r {\u0026#34;Dog Ear radar\u0026#34;, cell = 13}, -- the actual air defense units\r {\u0026#34;ZSU-23-4 Shilka\u0026#34;, hdg = 0, random}, {\u0026#34;ZSU-23-4 Shilka\u0026#34;, hdg = 90, random}, {\u0026#34;ZSU-23-4 Shilka\u0026#34;, hdg = 180, random}, {\u0026#34;ZSU-23-4 Shilka\u0026#34;, hdg = 270, random},\r-- a supply truck or three\r {\u0026#34;Transport Ural-4320-31 Armored\u0026#34;, number = {min=1, max=3}, random},\r},\rdescription = \u0026#34;ZSU-23-4 battery\u0026#34;,\rgroupName = \u0026#34;ZSU-23-4 battery\u0026#34;\r},\r},\rA quite random, but nonetheless deadly air defense group {\raliases = {\u0026#34;generateAirDefenseGroup-RED-5\u0026#34;},\rhidden,\rgroup = {\rdisposition = { h= 7, w= 7},\runits = {\r-- the search radar\r {\u0026#34;Dog Ear radar\u0026#34;, random}, -- Tor battery\r {\u0026#34;Tor 9A331\u0026#34;, hdg = 0, random}, {\u0026#34;Tor 9A331\u0026#34;, hdg = 90, random}, {\u0026#34;Tor 9A331\u0026#34;, hdg = 180, random}, {\u0026#34;Tor 9A331\u0026#34;, hdg = 270, random},\r-- Some SA13\r {\u0026#34;Strela-10M3\u0026#34;, number = {min=2, max=4}, random},\r-- Some Shilkas\r {\u0026#34;ZSU-23-4 Shilka\u0026#34;, number = {min=2, max=4}, random},\r-- a supply truck or three\r {\u0026#34;Transport Ural-4320-31 Armored\u0026#34;, number = {min=1, max=3}, random},\r},\rdescription = \u0026#34;generateAirDefenseGroup-RED-5\u0026#34;,\rgroupName = \u0026#34;generateAirDefenseGroup-RED-5\u0026#34;,\r},\r},\rA very simple infantry group {\raliases = {\u0026#34;US infgroup\u0026#34;},\rgroup = {\rdisposition = { h = 5, w = 5},\runits = {{\u0026#34;IFV Hummer\u0026#34;, number = {min=1, max=2}, random},{\u0026#34;INF Soldier M249\u0026#34;, number = {min=1, max=2}, random},{\u0026#34;INF Soldier M4 GRG\u0026#34;, number = {min=2, max=4}, random},{\u0026#34;INF Soldier M4\u0026#34;, number = {min=6, max=15}, random}},\rdescription = \u0026#34;US infantry group\u0026#34;,\rgroupName = \u0026#34;US infantry group\u0026#34;,\r},\r},\rHow to use in a mission Depending on the mission, it is possible to spawn groups and units defined with this module by using the commands in the veafSpawn, the veafInterpreter and the veafCombatZone modules. See their specific documentation to find out how.\n"
},
{
	"uri": "https://veaf.github.io/VEAF-Mission-Creation-Tools/mission-maker/modules/veafspawn/",
	"title": "veafSpawn",
	"tags": [],
	"description": "",
	"content": "Introduction This module allows the user to spawn several type of DCS objects in a running mission ; it can spawn :\n groups that have been defined with the veafUnits module units that are defined in DCS (either via their veafUnits alias, or their DCS type name dynamic groups that use templates defined with the veafUnits module, but can be configured and are randomized convoys that can go from a point to another, and be tracked and managed with radio commands cargo statics and logistic points that are registered with CTLD and can be transported via helicopter bombs that can destroy scenery, units and groups (even client aircrafts and vehicles) smoke and illumination flares  It also provides commands to :\n teleport an existing unit or group to a different location cleanly destroy a unit or several units inside a defined circle (without leaving a smoking wreck behind, that is)  How to set up a mission Let\u0026rsquo;s start by saying that you can clone the VEAF-Demo-Mission repository and use it as an example (or fork it and create a new mission from your fork).\nLoad the script and its prerequisites In DCS mission editor, set up a \u0026ldquo;mission start\u0026rdquo; trigger that will :\n  load the following scripts (in order) :\n mist.lua (from the community folder) veaf.lua veafUnits.lua veafMarkers.lua veafRadio.lua veafCasMission.lua veafSpawn.lua    run the following lua code :\nveafUnits.initialize();\rveafMarkers.initialize();\rveafRadio.initialize();\rveafCasMission.initialize();\rveafSpawn.initialize();\r  How to use in a mission Markers The veafSpawn module is managed by creating markers, which names should follow a specific syntax (see next headings).\nThis syntax is composed of a mandatory instruction (at the beginning) and mandatory or optional (depending on the instruction) parameters separated by commas.\nExample : _spawn group, name US infgroup, country USA\nFor more informations about markers, see Markers\nSpawn units and groups The _spawn instruction can spawn units (_spawn unit) or groups (_spawn groups).\nBoth commands accept the same set of mandatory (bold) or optional (italic) parameters:\n name is the name of the unit or group in the VEAF and DCS databases; The HELP - all units and HELP - all groups radio menu commands will list all valid values; e.g. _spawn unit, name sa6 country (default RUSSIA) is the name of the country this unit will belong to; e.g. _spawn group, name US infgroup, country USA speed (default 0) is the speed of the unit/group, when it spawns. For most units/groups it will reset to its predefined orders; e.g. _spawn unit, name sa6, speed 15 altitude or alt (default 0) is the altitude of the unit/group (same remarks as speed); e.g. _spawn unit, name sa6, alt 15 heading or hdg (default 0) is the heading of the unit/group (same remarks as speed); e.g. _spawn unit, name sa6, hdg 270  Some parameters are specific to the _spawn unit instruction:\n unitName (default is the unit display name in DCS suffixed with a numeric counter) will be the name this unit will have in the DCS mission (not to be mistaken with the unit type parameter, name); e.g. _spawn unit, name sa6, unitname air-defense-SA6  A special instruction will spawn a specific unit with a JTAC role, and set it as invisible and invincible: _spawn jtac.\nIt has a specific parameter:\n laser (default 1688) can be used to choose a laser code for the JTAC ; e.g. _spawn jtac, laser 1681  Some parameters are specific to the _spawn group instruction:\n  spacing (default 5) is used to add space between a group\u0026rsquo;s units (see veafUnits)\n  isconvoy (default false) if set, makes the group behave like a convoy\n dest (mandatory in this case) the named point where the convoy must go (see veafNamedPoints) patrol (default false) if set, makes the group go back and forth between its spawn point and its destination point offroad (default false) if set, the group will not try and use roads    Examples:\n_spawn unit, name sa6, unitname tbilissi-air-defense country UKRAINE, hdg 245\n_spawn group, name RU-SAM-SA9-Battery, spacing 10\n_spawn group, name US infgroup, isconvoy, dest TBILISSI, speed 15, patrol\nSpawn dynamic groups The _spawn instruction can also spawn dynamic groups; these groups are randomized, and parameters can be used to choose several aspects of this randomization.\nThis is the list of the parameters common to all the dynamic group spawn instructions:\n side (default RED) is the coalition the group(s) will belong to (RED or BLUE) country (default USA for side=blue, RUSSIA for side=red) is the country the group(s) will belong to heading (default 0) is the global heading of the groups; units in the group will have their individual heading (in the template definition) adapted to be relative to this global heading spacing (default 5) is used to add space between a group\u0026rsquo;s units (see veafUnits), but also to add space between the groups  The type of the dynamic group is linked to the instruction itself. Each dynamic group instruction has its own set of parameter.\ninfantry section _spawn infantrygroup will spawn an infantry section (an armored personnel carrier with an infantry section and optional air defense - manpads)\n defense (default 1) will determine the air defense generated for this group:  if 0: no manpad 1..3: between 1 and defense older manpad systems 4..5: between 1 and defense-2 modern manpad systems   armor (default 1) will determine the personnel carrier vehicle:  if 0: a M 818 (BLUE) or a GAZ-3308 (RED) truck 1..3: a IFV Boman (BLUE) or a BTR-80 (RED) 4..5: a M-2 Bradley (BLUE) or a BMP-1 (RED)    armor platoon _spawn armorgroup will spawn an armor platoon (3-6 armored vehicles with optional escorting air defence systems)\n defense (default 1) will determine the air defense generated for this group:  if 0: no air defense 1..3: a Gepard (BLUE) or a ZSU-23-4 Shilka (RED) 4..5: an M6 Linebacker (BLUE) or a 2S6 Tunguska (RED)   armor (default 1) will determine the personnel carrier vehicle:  0..2: random choice between M-2 Bradley, IFV MCV-80, IFV Boman (BLUE) or BMP-1, BMD-1, BRDM-2 (RED) 3: random choice between M-2 Bradley (66%), M-60 (33%) (BLUE) or BMP-1, BMP-2, T-55 (RED) 4: random choice between M-2 Bradley (50%), M-60 (25%), Leopard-2 (25%) (BLUE) or BMP-1, BMP-2, T-55, T-72 (RED) 5: random choice between M-2 Bradley (50%), MBT Leopard1A3 (25%), M-1 Abrams (25%) (BLUE) or BMP-2, BMP-3, T-80UD, T-90 (RED)    air defense battery _spawn samgroup will spawn an air defense battery (multiple air defense launchers/systems, a search radar and support vehicles)\n defense the group will be spawned from the veafUnit template called \u0026ldquo;generateAirDefenseGroup-side-defense\u0026rdquo; where side is either RED or BLUE and defense is the defense parameter value; e.g. generateAirDefenseGroup-RED-3  transport company _spawn transportgroup will spawn a transport company (several trucks with optional escorting air defence systems)\n defense (default 1) will determine the air defense generated for this group, one of these air defense system for every ten trucks:  if 0: no air defense 1: a Gepard (BLUE) or a Ural-375 ZU-23 (RED) 2: a Gepard (BLUE) or a ZSU-23-4 Shilka (RED) 3: an M6 Linebacker (BLUE) or a 2S6 Tunguska (RED) 4..5: an M6 Linebacker and a Gepard (BLUE) or a 2S6 Tunguska and a ZSU-23-4 Shilka (RED)   size (default 10) the number of trucks that will be spawned  full combat group _spawn combatgroup will spawn a full combat group, composed of multiple infantry groups, multiple armor platoons, several transport companies and 1 or 2 air defense groups\n defense (default 1) will be used for every generated group (see above) armor (default 1) will be used for every generated group (see above) size (default 10) will be used for every generated group (see above) and condition the groups that will be generated:  between size-2 and size+1 infantry groups between size-2 and size+1 armor platoons 1 or 2 air defense groups if defense is not 0 between 1 and size transport companies    Examples:\n_spawn samgroup, defense 3, side blue\n_spawn armorgroup, defense 0, armor 5, side red\n_spawn combatgroup, defense 1, armor 2, size 5, side blue\nSpawn convoys The _spawn convoy instruction will generate a dynamic convoy, and send it on its route to a named point (see veafNamedPoints).\nThe convoys are tracked and managed in the VEAF SPAWN radio menu.\nIt is possible to find out if a convoy still exists (or was destroyed entirely), find out where it is (or between which points it travels) thanks to smoke markers, or dispose of a convoy.\nThe convoy will be composed of a transport company (see transport company above) and an armor platoon (see armor platoon above).\nThis instruction accepts several parameters:\n destination or dest is the name of a named point where the convoy will drive to offroad (default false) if set, the convoy will not try and use roads size (default 10) the number of trucks that will be spawned; no transport company at all if 0 armor (default 1) will determine the personnel carrier vehicle:  0: no armor platoon 1..2: random choice between M-2 Bradley, IFV MCV-80, IFV Boman (BLUE) or BMP-1, BMD-1, BRDM-2 (RED) 3: random choice between M-2 Bradley (66%), M-60 (33%) (BLUE) or BMP-1, BMP-2, T-55 (RED) 4: random choice between M-2 Bradley (50%), M-60 (25%), Leopard-2 (25%) (BLUE) or BMP-1, BMP-2, T-55, T-72 (RED) 5: random choice between M-2 Bradley (50%), MBT Leopard1A3 (25%), M-1 Abrams (25%) (BLUE) or BMP-2, BMP-3, T-80UD, T-90 (RED)    The players can use the following radio menu commands:\n Info on all convoys will output a list of convoys; for each convoy it\u0026rsquo;ll print its name, the number of remaining vehicles, and its position Mark closest convoy route will pop a green smoke at the convoy\u0026rsquo;s starting point, and a red one at the end point Mark closest convoy will pop a white smoke at the convoy\u0026rsquo;s current position Cleanup all convoys will remove all active convoys from the mission  Spawn cargo statics and logistic points These are specific to CTLD and, for it to work, it has to be configured in your mission.\nYou can follow these instructions to configure CTLD in your mission.\ncargo statics Cargo statics (crates, ammo, fuel barrels and the like) can be spawned by the _spawn cargo instruction\nThis instruction accepts these parameters:\n name (default ammo_cargo) is the type of cargo to be spawned. It must be a valid cargo known by DCS and transportable. The HELP - all cargoes radio menu command will list all valid values; e.g. _spawn cargo, name barrels_cargo smoke if set, will pop a green smoke where the cargo is spawned; e.g. _spawn cargo, smoke unitName (default is the cargo display name in DCS suffixed with a numeric counter) will be the name this cargo will have in the DCS mission (not to be mistaken with the unit type parameter, name); e.g. _spawn cargo, name barrels_cargo, unitname and-two-barrels-of-rhum  Cargo spawned is registered with CTLD and transportable by whatever aircraft CTLD is configured to accept as a transport aircraft.\nlogistic points Logistic points are static DCS units that marks the center of a CTLD logistic zone.\nWhen spawned with the _spawn logistic instruction, they are registered with CTLD and when inside their action radius, aircraft configured in CTLD as transport aircrafts can load troops and spawn deployable crates with CTLD.\nThis instruction does not accept any parameter.\nSpawn bombs and artillery shelling The _spawn bomb instruction will create and detonate a bomb at the specified location. The bomb detonation will destroy or damage the surrounding units, statics and world objects.\nThis instruction accepts this parameter:\n power (default 100) is the bomb detonation power (limited to 1000)  NB: artillery shelling is not yet available.\nSpawn smoke markers and illumination flares smoke marker Smoke markers of multiple colors can be spawned by the players with the _spawn smoke instruction\nThis instruction accepts this parameter:\n color (default red) is the color of the spawned smoke marker (possible values are red, green, orange, blue and white); e.g. _spawn smoke, color orange  illumination flares Illumination flares will light up a zone when the night is too dark to see the targets; they can be spawned with the _spawn flare instruction\nThis instruction accepts this parameter:\n altitude or alt (default 1000) is the altitude (in meters) at which the flare will begin its descent; e.g. _spawn flare, alt 2000  Teleport objects The _teleport instruction can instantly move units or groups.\nThis instruction accepts this mandatory parameter:\n name is the name of the DCS group that will be moved; e.g. _teleport, name Arco  Destroy objects The _destroy instruction can instantly destroy units inside a radius around the chose point.\nThe destroyed objects do not leave any wreck and are simply removed from the mission.\nThis instruction accepts this parameter:\n radius (default 150) is the destruction radius (in meters); e.g. _destroy, radius 500  "
},
{
	"uri": "https://veaf.github.io/VEAF-Mission-Creation-Tools/mission-maker/modules/veafcasmission/",
	"title": "veafCasMission",
	"tags": [],
	"description": "",
	"content": "Introduction This module allows the players to manage a Close Air Support mission at runtime.\nThe mission is created by placing a marker with a specific command (see Concepts / F10 map user marks)\nExample : _cas, defense 3, size 5\nHow to set up a mission Let\u0026rsquo;s start by saying that you can clone the VEAF-Demo-Mission repository and use it as an example (or fork it and create a new mission from your fork).\nLoad the script and its prerequisites In DCS mission editor, set up a \u0026ldquo;mission start\u0026rdquo; trigger that will :\n load the following scripts (in order) :  mist.lua (from the community folder) veaf.lua veafRadio.lua veafCasMission.lua   run the following lua code : veafRadio.initialize();veafCasMission.lua.initialize();  How to use in a mission Markers The veafCasMission module is managed by creating markers, which names should follow a specific syntax (see next headings).\nThis syntax is composed of a mandatory instruction (at the beginning) and mandatory or optional (depending on the instruction) parameters separated by commas.\nExample : _cas, defense 3, size 5\nFor more informations about markers, see Concepts / F10 map user marks\nRadio menus The radio menu, when a CAS mission is active, contain the following commands:\n Target information: get a report about the battle zone (coordinates, weather, enemy units) Skip current objective: cancel the CAS mission and clean up all the spawned units Request smoke on target area: pop a smoke at the barycenter of the spawned units (the menu will change to Target is marked with red smoke until the smoke runs out) Request illumination flare over target area: send an illumination flare above the battle zone (the menu will change to Target area is marked with illumination flare until the flare runs out)  Syntax The command that will create a CAS mission is _cas\nThe options are the same as the ones in the veafSpawn module for spawning dynamic groups.\nSpecifically, the act of creating a CAS mission starts with the spawning of a dynamic full combat group\n"
},
{
	"uri": "https://veaf.github.io/VEAF-Mission-Creation-Tools/mission-maker/modules/veafcombatzone/",
	"title": "veafCombatZone",
	"tags": [],
	"description": "",
	"content": "Introduction With this module, the mission maker can define combat missions that will be referenced in the COMBAT ZONES radio menu. In this menu, each of the missions can be checked (briefing), activated (if inactive) or deactivated (if active), smoke markers or lighting flares can be requested.\nHow to set up a mission Let\u0026rsquo;s start by saying that you can clone the VEAF-Demo-Mission repository and use it as an example (or fork it and create a new mission from your fork).\nLoad the script and its prerequisites Please refer to the Load scripts in the mission for loading the scripts.\nHow to configure the script in a mission In the previous paragraph, you were told to create a missionConfig.lua script containing all the mission-specific code. Now we\u0026rsquo;re going to use it to define combat missions.\nHere is the kind of code that you must add in the mission initialisation script:\n-- configure COMBAT ZONE\r if veafCombatZone then\rveafCombatZone.logInfo(\u0026#34;Loading configuration\u0026#34;)\rveafCombatZone.AddZone(\rVeafCombatZone.new()\r:setMissionEditorZoneName(\u0026#34;combatZone_CrossKobuleti\u0026#34;)\r:setFriendlyName(\u0026#34;Cross Kobuleti\u0026#34;)\r:setBriefing(\u0026#34;This is a simple mission\\n\u0026#34; ..\r\u0026#34;You must destroy the comm antenna\\n\u0026#34; ..\r\u0026#34;The other ennemy units are secondary targets\\n\u0026#34;)\r:initialize()\r)\rveafCombatZone.AddZone(\rVeafCombatZone.new()\r:setMissionEditorZoneName(\u0026#34;combatZone_Batumi\u0026#34;)\r:setFriendlyName(\u0026#34;Batumi airbase\u0026#34;)\r:setBriefing(\u0026#34;A BTR patrol and a few manpads are dispersed around the Batumi airbase\u0026#34;)\r:setTraining(true)\r:initialize()\r)\rveafCombatZone.initialize()\rend\rLet\u0026rsquo;s detail this code.\nFirst, we define two combat zones: the Cross Kobuleti and the Batumi airbase. For each of these zones, we specify a mission editor zone name (more about this later), a friendly name (that will be displayed in the radio menu) and a briefing (also displayed when getting info about a combat zone). One of the zone is considered a training zone (with the :setTraining(true) code). This means that:\n the count of remaining units in the briefing will be split into unit type (e.g. 2 Shilka, 4 SA-18) the location of the marker smoke will be the exact barycenter of all the remaining units, instead of being the center of the zone  Then we call the :initialize() method to finish preparing the combat zone.\nEventually, when all our zones are defined, we call veafCombatZone.initialize() to initialise the script (build the combat zones and prepare the radio menu).\nHow to setup a Combat Zone in the mission editor A combat zone starts with a mission editor zone object. So, first thing first, you must place such an object on the map and name it with a memorable name.\nThen, you must add units inside the mission editor zone object (this is very important, as only the units inside the zone will be part of the combat zone), and name the groups with a name that starts with the mission editor zone name (this is equally important, as groups named otherwise will not be part of the combat zone).\nGroups can either be actual DCS groups or statics (as the one in the screenshot above) or special groups containing a VEAF command. Whatever type a group is, the first unit of the group can have specific options inserted in its name, conditionning the spawn of the group (or the execution of the command) when the mission is later activated. The groups can have a route, which will be set on the actual group(s) that will be spawned when the mission is activated.\nAll these groups define combat zone elements, which are stored in memory until the zone is activated. They\u0026rsquo;ll be destroyed at mission start !\nSpawn options The options all start with a pound symbol, followed by a keyword, an equal sign and a value (surrounded with french quotes if it\u0026rsquo;s a text value). E.g. #spawnGroup=\u0026quot;patrol-group1\u0026quot;, or #spawnCount=1 All these options are, as their name implies, optional.\n spawnRadius (in meters) the spawn point of the combat zone element will be chosen randomly in this radius around the actual group position in the mission editor. E.g. #spawnRadius=500 spawnChance (in percent) the combat zone element will have spawnChance out of 100 chances of being actually spawned or executed. E.g. #spawnChance=25 spawnGroup (text) (used with spawnCount) groups together combat zone elements, in such a way that only a certain number of them will actually get spawned or executed. This is useful to randomise the position of an enemy group in the mission, by specifying all the possible spawn points with a different group. E.g. #spawnGroup=\u0026quot;manpad-group1\u0026quot;,#spawnCount=2, repeated over a few mission editor groups in the zone, will make only 2 of them spawn (based on the spawnChance of each one). spawnCount (number) (used with spawnGroup) defines the number of combat zone elements grouped together with spawnGroup that will always spawn or be executed.  Important note: DCS has a way of making unit and group names unique by adding a pound symbol followed by a 3 digits number. This is all well and good, but if you separate the different options in a unit name with spaces, only the first option will be kept (DCS mission editor will automatically erase the rest and replace it with its numbering system). The solution is to use other characters to separate the options in the unit name, such as a comma. E.g. #spawnGroup=\u0026quot;patrol-group1\u0026quot;,#spawnCount=1,#spawnChance=25\nExample of randomisation by using spawnGroup and spawnCount\nIn this example, we created a zone named combatZone_Batumi, with 6 mission editor groups named combatZone_Batumi - manpad-group1, each one a manpad group with its first unit named #spawnGroup=\u0026quot;manpad-group1\u0026rdquo;,#spawnCount=2,#spawnChance=25 (DCS adds its numbering system to make the names unique).\nThe result is a randomisation of these manpad groups: each time the combat zone is activated, two random manpad groups out of the six possible groups are spawned.\n(this animation also shows a random BTR patrol)\nVEAF commands Instead of \u0026ldquo;simply\u0026rdquo; adding a DCS group to the mission editor, it\u0026rsquo;s possible to define a VEAF command that will be executed when the combat zone element will be activated. This is done by using the #command spawn option; e.g. #command=\u0026quot;_spawn group, name sa6\u0026quot;. The command itself can be any VEAF command that will be recognized inside a marker at runtime (see Markers), such as:\n a _spawn command (see the veafSpawn documentation); e.g. #command=\u0026quot;_spawn group, name sa6\u0026quot; an alias (see the veafShortcuts documentation); e.g. #command=\u0026quot;-samlr\u0026quot; the definition of a named point (see the veafNamedPoints documentation); e.g. #command=\u0026quot;_name point Kobuleti City\u0026quot; the start of a CAS mission (see the veafCasMission documentation); e.g. #command=\u0026quot;_cas, defense 3, size 5\u0026quot; a command for the security module (see the veafSecurity documentation); e.g. #command=\u0026quot;_auth mysecretp@ssw0rd\u0026quot;  The #command spawn option can, of course, be combined with other spawn options.\nConclusion Using this powerful script, it\u0026rsquo;s very easy to define a complex, dynamic, randomized yet hand-crafted mission that can be triggered as will by the players when they want to use it. For example, I designed a combat zone that starts a vivid ground battle with (for each side):\n a static air defense group: #command=\u0026quot;_spawn samgroup, size 1, defense 4\u0026quot; 3 armor platoons, moving toward their enemy counterpart: #command=\u0026quot;_spawn armorgroup, size 5, armor 5, defense 0\u0026quot; #spawnradius=500 4 manpad groups, of which only 2 will actually spawn: #spawnGroup=\u0026quot;RU-manpad\u0026quot;,#spawnCount=2,#spawnChance=25  How to use in a mission Use the radio menus to :\n get information (briefing) about a combat zone activate or deactivate a combat zone request a smoke marker on the combat zone request a lighting flare dropped over the combat zone  "
},
{
	"uri": "https://veaf.github.io/VEAF-Mission-Creation-Tools/mission-maker/third-party/",
	"title": "Third party",
	"tags": [],
	"description": "",
	"content": "This chapter lists and documents the third-party scripts that can be used with the VEAF Mission Creation Tools.\n"
},
{
	"uri": "https://veaf.github.io/VEAF-Mission-Creation-Tools/mission-maker/third-party/ctld/",
	"title": "CTLD",
	"tags": [],
	"description": "",
	"content": "Introduction CTLD is a third-party script that allow the players of a well-configured mission to transport troops and deployable crates with helicopters and transport airplanes.\nHow to set up a mission Let\u0026rsquo;s start by saying that you can clone the VEAF-Demo-Mission repository and use it as an example (or fork it and create a new mission from your fork).\nLoad the script and its prerequisites In DCS mission editor, set up a \u0026ldquo;mission start\u0026rdquo; trigger that will :\n load the following scripts (in order) :  mist.lua (from the community folder) CTLD.lua   run the following lua code : ctld.initialize(); load a new file that you\u0026rsquo;ll write, and that will initialize the veafAsset script specifically for your mission ; usually it\u0026rsquo;s called veafCTLDConfig.lua, and if you follow our model (VEAF-Demo-Mission) it\u0026rsquo;s stored in the scripts folder of your mission.  How to configure the script in a mission The veafCTLDConfig.lua file should contain CTLD-specific configuration.\nAs CTLD is not part of the VEAF Mission Creation Tools, we\u0026rsquo;ll simply explain the most often used sections of this configuration. For more information, see the CTLD project page.\nPickup zones The ctld.pickupZones table defines a list of Trigger Zone (or ship) names that will be configured as CTLD pickup zones.\nIn the active radius of a pickup zone, one can load troops and spawn deployable crates.\nExample:\nctld.pickupZones = {\r{ \u0026#34;pickzone1\u0026#34;, \u0026#34;none\u0026#34;, -1, \u0026#34;yes\u0026#34;, 0 },\r{ \u0026#34;pickzone2\u0026#34;, \u0026#34;none\u0026#34;, -1, \u0026#34;yes\u0026#34;, 0 },\r{ \u0026#34;pickzone3\u0026#34;, \u0026#34;none\u0026#34;, -1, \u0026#34;yes\u0026#34;, 0 },\r{ \u0026#34;pickzone4\u0026#34;, \u0026#34;none\u0026#34;, -1, \u0026#34;yes\u0026#34;, 0 },\r{ \u0026#34;pickzone5\u0026#34;, \u0026#34;none\u0026#34;, -1, \u0026#34;yes\u0026#34;, 0 },\r{ \u0026#34;CVN-74 Stennis\u0026#34;, \u0026#34;none\u0026#34;, 10, \u0026#34;yes\u0026#34;, 0, 1001 }, -- instead of a Zone Name you can also use the UNIT NAME of a ship\r { \u0026#34;LHA-1 Tarawa\u0026#34;, \u0026#34;none\u0026#34;, 10, \u0026#34;yes\u0026#34;, 0, 1002 }, -- instead of a Zone Name you can also use the UNIT NAME of a ship\r }\rTransport pilots The ctld.transportPilotNames table lists the names of all the pilots that will be allowed to use CTLD. If a client unit in the mission has a pilot name that is in this list, then the player piloting this unit will be allowed to use CTLD.\nExample:\nctld.transportPilotNames = {\r\u0026#34;helicargo1\u0026#34;,\r\u0026#34;helicargo1\u0026#34;,\r\u0026#34;helicargo2\u0026#34;,\r\u0026#34;helicargo3\u0026#34;,\r\u0026#34;helicargo4\u0026#34;,\r\u0026#34;helicargo5\u0026#34;\r}\rLoad limits The ctld.unitLoadLimits table overloads the default load limits for specific unit types. In the following example, we allow the Mi-8 to transport 24 units of load:\nctld.unitLoadLimits = {\r[\u0026#34;Mi-8MT\u0026#34;] = 24\r}\r"
},
{
	"uri": "https://veaf.github.io/VEAF-Mission-Creation-Tools/mission-maker/references/",
	"title": "References",
	"tags": [],
	"description": "",
	"content": "This chapter references some of the core databases in the VEAF Mission Creation Tools.\n"
},
{
	"uri": "https://veaf.github.io/VEAF-Mission-Creation-Tools/mission-maker/references/group-list/",
	"title": "Groups list",
	"tags": [],
	"description": "",
	"content": "List of the groups defined by the veafUnits module    Name Description Aliases     Hawk Hawk SAM site hawk, ha, mim-23   Mechanized infantry section Mechanized infantry section with APCs infantry section, infsec   Patriot Patriot SAM site patriot, pa, mim-104   Rapier Rapier SAM site rapier_optical, rpo   Rapier-radar Rapier SAM site with radar rapier_radar, rpr   Roland Roland SAM site roland, rd, mim-115   RU small supply convoy with defense RU small supply convoy with defense RU small supply convoy with defense, redsmallconvoy-def   RU small supply convoy with light defense RU small supply convoy with light defense RU small supply convoy with light defense, redsmallconvoy-lightdef   RU small supply convoy with no defense RU small supply convoy with no defense RU small supply convoy with no defense, redsmallconvoy-nodef, redconvoy, convoy   RU supply convoy with defense RU supply convoy with defense RU supply convoy with defense, redconvoy-def   RU supply convoy with light defense RU supply convoy with light defense RU supply convoy with light defense, redconvoy-lightdef   RU supply convoy with no defense RU supply convoy with no defense RU supply convoy with no defense, redconvoy-nodef   S300 S300 SAM site sa10, s300, bb   SA-13 battery SA-13 battery RU-SAM-SA13-Battery   SA-9 battery SA-9 battery RU-SAM-SA9-Battery   SA11 SA-11 SAM site sa11, sa-11, sd   SA2 SA-2 SAM site sa2, sa-2, fs   SA3 SA-3 SAM site sa3, sa-3, lb   SA6 SA-6 SAM site sa6, sa-6, 06   US infantry group US infantry group US infgroup   US infantry group US infantry group US supply convoy, blueconvoy   ZSU-23-4 battery ZSU-23-4 battery RU-SAM-Shilka-Battery    "
},
{
	"uri": "https://veaf.github.io/VEAF-Mission-Creation-Tools/mission-maker/references/unit-list/",
	"title": "Units list",
	"tags": [],
	"description": "",
	"content": "List of the units defined by the dcsUnits module    Name Description Aliases     .Ammunition depot     .Command Center     052B DDG-168 Guangzhou    054A FFG-538 Yantai    1L13 EWR EWR 1L13    2S6 Tunguska SAM SA-19 Tunguska 2S6    55G6 EWR EWR 55G6    5p73 s-125 ln SAM SA-3 S-125 LN 5P73    A-10A a-10a    A-10C A-10C    A-50 a-50    AH-1W ah-1w super cobra    AH-64A ah-64a apache    AH-64D ah-64d apache longbow    Airshow_Cone Airshow cone    Airshow_Crowd Airshow Crowd    AJS37 AJS37    ALBATROS FFL 1124.4 Grisha    ammo_cargo Ammo    An-26B an-26b    An-30M an-30m    ARTY 2B11 mortar 2B11 mortar    ARTY M-109 SPH M109 Paladin    ARTY M12_GMC M12 GMC    ARTY SAU 2-C9 SPH 2S9 Nona    ARTY SAU Akatsia SPH 2S3 Akatsia    ARTY SAU Gvozdika SPH 2S1 Gvozdika    ARTY SAU Msta SPH 2S19 Msta    ARTY SK_C_28_naval_gun SK C/28 15cm naval gun    ARTY SpGH_Dana SpGH Dana    ARTY SturmPzIV Sturmpanzer IV Brummbär    AV8BNA AV8BNA    B-17G B-17G    B-1B b-1b    B-52H b-52h    Barracks 2 Barracks 2    barrels_cargo Barrels    Bf-109K-4 Bf-109K-4    Black_Tyre Mark Tyre Black    Black_Tyre_RF Mark Tyre with Red Flag    Black_Tyre_WF Mark Tyre with White Flag    bofors40 AAA Bofors 40mm    Boiler-house A Boiler-house A    Bunker Bunker 2    C-101CC C-101CC    C-101EB C-101EB    C-130 c-130j    C-17A c-17    Cafe Cafe    Cargo1     CH-47D ch-47d chinook    CH-53E ch-53e super stallion    Chemical tank A Chemical tank A    Coach a passenger Coach for passengers    Coach a platform Coach flatbed    Coach a tank blue Coach a tank blue    Coach a tank yellow Coach a tank yellow    Coach cargo Coach for cargo    Coach cargo open Coach for open cargo    Comms tower M Comms tower M    Container brown Container brown    Container red 1 Container red 1    Container red 2 Container red 2    Container red 3 Container red 3    Container white Container white    container_cargo Container    Dog Ear radar CP 9S80M1 Sborka    Dry-cargo ship-1 Bulk cargo ship Yakushev    Dry-cargo ship-2 Dry cargo ship Ivanov    E-2C e-2c hawkeye    E-3A e-3a    Electric locomotive Electric locomotive    Electric power box Electric power box    ELNYA Tanker Elnya 160    F-14A f-14a    F-15C F-15C    F-15E F-15E    F-16A F-16A    F-16A MLU F-16A    F-16C bl.50 F-16c    F-16C bl.52d F-16c    F-5E F-5E    F-5E-3 F-5E-3    F-86F Sabre F-86F    f_bar_cargo F-shape barrier    FA-18C f-18c    Farm A Farm A    Farm B Farm B    FARP Ammo Dump Coating FARP Ammo Storage    FARP CP Blindage FARP Command Post    FARP Fuel Depot FARP Fuel Depot    FARP Tent FARP Tent    flak18 AAA Flak 18    flak30 AAA Flak 30    flak36 AAA Flak 36    flak37 AAA Flak 37    flak38 AAA Flak-Vierling 38    Fuel tank Fuel tank    fueltank_cargo Fueltank    FW-190D9 FW-190D9    Garage A Garage A    Garage B Garage B    Garage small A Garage small A    Garage small B Garage small B    GeneratorF GeneratorF    Gepard SPAAA Gepard    Hangar A Hangar A    Hangar B Hangar B    Hawk Hawk    Hawk cwar SAM Hawk CWAR AN/MPQ-55    Hawk ln SAM Hawk LN M192    Hawk pcp SAM Hawk PCP    Hawk sr SAM Hawk SR AN/MPQ-50    Hawk tr SAM Hawk TR AN/MPQ-46    house2arm Watch tower armed    houseA_arm Armed house    IFV AAV7 APC AAV-7    IFV BMD-1 IFV BMD-1    IFV BMP-1 IFV BMP-1    IFV BMP-2 IFV BMP-2    IFV BMP-3 IFV BMP-3    IFV Boman ARV MTLB-U BOMAN    IFV BRDM-2 ARV BRDM-2    IFV BTR-80 APC BTR-80    IFV BTR_D ARV BTR-RD    IFV Cobra APC Cobra    IFV Hummer APC M1025 HMMWV    IFV LAV-25 IFV LAV-25    IFV M-113 APC M113    IFV M-2 Bradley IFV M2A2 Bradley    IFV M1043 HMMWV Armament APC M1043 HMMWV Armament    IFV M1045 HMMWV TOW ATGM M1045 HMMWV TOW    IFV M1126 Stryker ICV APC M1126 Stryker ICV    IFV M1134 Stryker ATGM ATGM M1134 Stryker    IFV M30_CC M30 Cargo Carrier    IFV Marder IFV Marder    IFV MCV-80 IFV MCV-80    IFV MLRS FDDM MLRS FDDM    IFV MTLB APC MTLB    IFV Tigr_233036 APC Tigr 233036    IFV TPZ TPz Fuchs    IL-76MD il-76md    IL-78M il-78m    INF Infantry AK Infantry Soldier Rus    INF Paratrooper AKS-74 Paratrooper AKS    INF Paratrooper RPG-16 Paratrooper RPG-16    INF Soldier AK Soldier AK    INF Soldier M249 Soldier M249    INF Soldier M4 Infantry M4    INF Soldier M4 GRG Georgian soldier with M4    INF Soldier RPG Soldier RPG    INF soldier_mauser98 Infantry Mauser 98    INF soldier_wwii_us Infantry M1 Garand    iso_container ISO container    iso_container_small ISO container small    J-11A J-11A    Ka-27 ka-27    Ka-50 ka-50    KC-135 kc-135    KC130 KC130    KDO_Mod40 AAA Kdo.G.40    KILO SSK 877    KJ-2000 KJ-2000    Kub 1S91 str SAM SA-6 Kub STR 9S91    Kub 2P25 ln SAM SA-6 Kub LN 2P25 sa6, sa-6   KUZNECOW CV 1143.5 Admiral Kuznetsov    L-39C L-39C    L-39ZA L-39ZA    Landmine Landmine    LHA_Tarawa LHA-1 Tarawa tarawa   Locomotive Locomotive    LST_Mk2 LST Mk.II    M-2000C M-2000C    M1097 Avenger SAM Avenger M1097    m117_cargo M117 bombs    M48 Chaparral SAM Chaparral M48    M6 Linebacker SAM Linebacker M6    MBT Challenger2 MBT Challenger II    MBT Cromwell_IV CT Cromwell IV    MBT Jagdpanther_G1 Jagdpanther G1    MBT JagdPz_IV Jagdpanzer IV    MBT Leclerc MBT Leclerc    MBT Leopard-2 MBT Leopard-2    MBT Leopard1A3 MBT Leopard 1A3    MBT M-1 Abrams MBT M1A2 Abrams    MBT M-60 MBT M60A3 Patton    MBT M1128 Stryker MGS SPG M1128 Stryker MGS    MBT M4_Sherman MT M4 Sherman    MBT M4A4_Sherman_FF MT M4A4 Sherman Firefly    MBT Merkava_Mk4 MBT Merkava Mk. 4    MBT Pz_IV_H MT Pz.Kpfw.IV Ausf.H    MBT Pz_V_Panther_G MT Pz.Kpfw.V Panther Ausf.G    MBT T-55 MBT T-55    MBT T-72B MBT T-72B    MBT T-80UD MBT T-80U    MBT T-90 MBT T-90    MBT Tiger_I HT Pz.Kpfw.VI Tiger I    MBT Tiger_II_H HT Pz.Kpfw.VI Ausf. B \u0026lsquo;Tiger II\u0026rsquo;    Mi-24V mi_24w    Mi-26 mi-26    Mi-28N Mi-28N    Mi-8MT mi-8mt    MiG-15bis MiG-15bis    MiG-21Bis MiG-21Bis    MiG-23MLD mig-23ml    MiG-25PD mig-25p    MiG-25RBT mig-25rbv    MiG-27K mig-27    MiG-29A mig-29    MiG-29G mig-29g    MiG-29S mig-29c    MiG-31 mig-31    Military staff Military staff    Mirage 2000-5 mirage 2000c    MLRS Grad-URAL MLRS BM-21 Grad    MLRS MLRS MLRS M270    MLRS Smerch MLRS 9A52 Smerch    MLRS Uragan_BM-27 MLRS 9K57 Uragan BM-27    MOLNIYA FSG 1241.1MP Molniya    MOSCOW CG 1164 Moskva    NEUSTRASH FFG 11540 Neustrashimy    OH-58D OH-58D    Oil derrick Oil derrick    Oil platform Oil platform    oiltank_cargo Oiltank    Osa 9A33 ln SAM SA-8 Osa 9A33 sa8, sa-8   outpost Outpost    outpost_road Road outpost    p-19 s-125 sr SAM SA-3 S-125 SR P-19    P-51D P-51D    Patriot AMG SAM Patriot AMG AN/MRC-137    Patriot cp SAM Patriot ICC    Patriot ECS SAM Patriot ECS AN/MSQ-104    Patriot EPP SAM Patriot EPP-III    Patriot ln SAM Patriot LN M901    Patriot str SAM Patriot STR AN/MPQ-53    PERRY FFG-7CL Oliver Hazzard Perry    PIOTR CGN 1144.2 Pyotr Velikiy    pipes_big_cargo Pipes big    pipes_small_cargo Pipes small    Pump station Pump station    Railway crossing A Railway crossing A    Railway crossing B Railway crossing B    Railway station Railway station    rapier_fsa_blindfire_radar Rapier FSA Blindfire Tracker    rapier_fsa_launcher Rapier FSA Launcher    rapier_fsa_optical_tracker_unit Rapier FSA Optical Tracker    Red_Flag Mark Flag Red    Repair workshop Repair workshop    Restaurant 1 Restaurant 1    REZKY FF 1135M Rezky    Roland ADS SAM Roland ADS    Roland Radar SAM Roland EWR    RQ-1A Predator RQ-1A Predator    S-300PS 40B6M tr SAM SA-10 S-300PS TR 30N6    S-300PS 40B6MD sr SAM SA-10 S-300PS SR 5N66M    S-300PS 54K6 cp SAM SA-10 S-300PS CP 54K6    S-300PS 5P85C ln SAM SA-10 S-300PS LN 5P85C    S-300PS 5P85D ln SAM SA-10 S-300PS LN 5P85D    S-300PS 64H6E sr SAM SA-10 S-300PS SR 64H6E    S-3B s-3a viking    S-3B Tanker s-3a viking    S_75M_Volhov SAM SA-2 LN SM-90    SA-11 Buk CC 9S470M1 SAM SA-11 Buk CC 9S470M1    SA-11 Buk LN 9A310M1 SAM SA-11 Buk LN 9A310M1    SA-11 Buk SR 9S18M1 SAM SA-11 Buk SR 9S18M1    SA-18 Igla comm SAM SA-18 Igla comm    SA-18 Igla manpad SAM SA-18 Igla MANPADS    SA-18 Igla-S comm SAM SA-18 Igla-S comm    SA-18 Igla-S manpad SAM SA-18 Igla-S MANPADS sa18, sa-18, manpad   SA342L SA342    SA342M SA342    SA342Mistral SA342    Sandbox Bunker 1    SH-60B sh-60b sea hawk    Shelter Shelter    Shelter B Shelter B    Shop Shop    Small house 1A Small house 1A    Small house 1A area Small house 1A area    Small house 1B Small house 1B    Small house 1B area Small house 1B area    Small house 1C area Small house 1C area    Small house 2C Small house 2C    Small werehouse 1 Small warehouse 1    Small werehouse 2 Small warehouse 2    Small werehouse 3 Small warehouse 3    Small werehouse 4 Small warehouse 4    snr s-125 tr SAM SA-3 S-125 TR SNR    SNR_75V SAM SA-2 TR SNR-75 Fan Song    Soldier stinger Stinger MANPADS    SOM SSK 641B    speedboat Armed speedboat    SpitfireLFMkIX SpitfireLFMkIX    SS Missile hy_launcher SS-N-2 Silkworm    SS Missile TomahawkLauncher Tomahawk Launcher    Stinger comm SAM Stinger comm    Stinger manpad dsr SAM Stinger MANPADS dsr    Stinger manpad GRG SAM Stinger MANPADS    Strela-1 9P31 SAM SA-9 Strela-1 9P31 sa9, sa-9   Strela-10M3 SAM SA-13 Strela-10M3 9A35M3 sa13, sa-13   Su-17M4 su-17m4    Su-24M su-24m    Su-24MR su-24mr    Su-25 su-25    Su-25T su-25T    Su-25TM su-39    Su-27 su-27    Su-30 su-30    Su-33 su-33    Su-34 su-34    Subsidiary structure 1 Subsidiary structure 1    Subsidiary structure 2 Subsidiary structure 2    Subsidiary structure 3 Subsidiary structure 3    Subsidiary structure A Subsidiary structure A    Subsidiary structure B Subsidiary structure B    Subsidiary structure C Subsidiary structure C    Subsidiary structure D Subsidiary structure D    Subsidiary structure E Subsidiary structure E    Subsidiary structure F Subsidiary structure F    Subsidiary structure G Subsidiary structure G    Supermarket A Supermarket A    Tank Tank    Tank 2 Tank 2    Tank 3 Tank 3    Tech combine Tech combine    Tech hangar A Tech hangar A    tetrapod_cargo Tetrapod    TF-51D TF-51D    TICONDEROG CG-60 Normandy    Tor 9A331 SAM SA-15 Tor 9A331 sa15, sa-15   Tornado GR4 Tornado GR4    Tornado IDS Tornado IDS    Truck ATMZ-5 Fuel Truck ATMZ-5    Truck ATZ-10 Fuel Truck ATZ-10    Truck Bedford_MWD Bedford MWD    Truck Blitz_36-6700A Blitz 3.6-6700A    Truck CCKW_353 CCKW 353    Truck DR_50Ton_Flat_Wagon DR 50Ton Flat Wagon    Truck DRG_Class_86 DRG Class 86    Truck GAZ-3307 Transport GAZ-3307    Truck GAZ-3308 Transport GAZ-3308    Truck GAZ-66 Transport GAZ-66    Truck German_covered_wagon_G10 German covered wagon G10    Truck German_tank_wagon German tank wagon    Truck HEMTT TFFT HEMTT TFFT    Truck IKARUS Bus Transport IKARUS-280    Truck KAMAZ Truck Transport KAMAZ-43101    Truck Kubelwagen_82 Kübelwagen 82    Truck Land_Rover_101_FC Land Rover 101 FC    Truck Land_Rover_109_S3 Land Rover 109 S3    Truck LAZ Bus Transport LAZ-695    Truck M 818 Transport M818    Truck M978 HEMTT Tanker Tanker M978 HEMTT    Truck MAZ-6303 Transport MAZ-6303    Truck Predator GCS CP Predator GCS    Truck Predator TrojanSpirit CP Predator TrojanSpirit    Truck SKP-11 CP SKP-11 ATC Mobile Command Post    Truck Trolley bus Transport ZIU-9    Truck Ural ATsP-6 Transport fire-engine Ural ATsP-6    Truck Ural-375 Transport Ural-375    Truck Ural-375 PBU CP Ural-375 PBU    Truck Ural-4320 APA-5D GPU APA-5D on Ural-4320    Truck Ural-4320-31 Transport Ural-4320-31 Armored    Truck Ural-4320T Transport Ural-4320T    Truck Willys_MB Willys MB    Truck ZiL-131 APA-80 GPU APA-80 on ZiL-131    Truck ZIL-131 KUNG Transport ZIL-131 KUNG    Truck ZIL-4331 Transport ZIL-4331    trunks_long_cargo Trunks long    trunks_small_cargo Trunks short    Tu-142 tu-142    Tu-160 tu-160    Tu-22M3 tu-22m3    Tu-95MS tu-95mc    TV tower TV tower    UAZ-469 Transport UAZ-469    UH-1H UH-1H    UH-60A uh-60a night hawk    uh1h_cargo UH-1H cargo    Ural-375 ZU-23 AAA ZU-23 on Ural-375    Ural-375 ZU-23 Insurgent AAA ZU-23 Insurgent on Ural-375    USS_Samuel_Chase LS Samuel Chase    VAZ Car Transport VAZ-2109    VINSON CVN-70 Carl Vinson    Vulcan AAA Vulcan M163    Warehouse Warehouse    Water tower A Water tower A    WC WC    White_Flag Mark Flag White    White_Tyre Mark Tyre White    Windsock Windsock    Workshop A Workshop A    Yak-40 yak-40    ZSU-23-4 Shilka SPAAA ZSU-23-4 Shilka shilka   ZU-23 Closed Insurgent AAA ZU-23 Insurgent Closed    ZU-23 Emplacement AAA ZU-23 Emplacement    ZU-23 Emplacement Closed AAA ZU-23 Closed    ZU-23 Insurgent AAA ZU-23 Insurgent    ZWEZDNY Civil boat Zvezdny     "
},
{
	"uri": "https://veaf.github.io/VEAF-Mission-Creation-Tools/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://veaf.github.io/VEAF-Mission-Creation-Tools/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]