[
{
	"uri": "https://veaf.github.io/VEAF-Mission-Creation-Tools/credits/",
	"title": "Credits",
	"tags": [],
	"description": "",
	"content": "Hall of fame  David \u0026ldquo;Zip\u0026rdquo; Pierron, VEAF Frédéric \u0026ldquo;Coubystark\u0026rdquo; Coubard, VEAF \u0026ldquo;Mitch\u0026rdquo;, VEAF  The VEAF non-profit association TODO\n"
},
{
	"uri": "https://veaf.github.io/VEAF-Mission-Creation-Tools/mission-maker/",
	"title": "Mission maker",
	"tags": [],
	"description": "",
	"content": "Introduction With these tools offered free of charge by the Virtual European Air Force, any mission maker can easily create a complex, dynamic mission in the DCS mission editor. In as little as 1 or 2 hours, you will have a mission with :\n a complex setup of dozens of units, easily added by using special templating commands. a system that dresses up FARP units to make them complete forwards bases of operations, with the required logistic vehicles, tents, guards and even windsocks a build system that will normalize your mission files so they aren't completely randomized and shuffled each time you edit them with the DCS editor. a radio presets frequencies injector; it'll use a template to set all the radio presets in the players planes. a player-controlled radio menu to control this mission at runtime. a robust, easy-to-setup security system that can restrict certain features to specific user groups. a Zeus-like system that can be used to spawn AI groups, convoys and units at runtime. a carrier vehicle that can automatically navigate upwind when requested by the players, and automatically return to its initial location afterwards; it can also manage a rescue helicopter on station (port side of the ship), and a S3-B emergency tanker. a ground attack mission system; this will generate a ground attack mission when requested, and create the radio menus needed to control it. a helo transport mission system; this will generate a helicopter transport mission when requested, and create the radio menus needed to control it.  Prerequisites There are two sets of prerequisites to use the VEAF Mission Creation Tools. First, if you simply want to use them in your missions, then you'll need :\n DCS World (of course) mist.lua (provided in the community folder)  But if you want to use the full development environment, and take advantage of the advanced features (normalization, injection), and easily publish your mission to a source control system (e.g. GitHub), you'll also need :\n git an IDE (notepad++, visual studio code\u0026hellip;) npm - for that install node.js 7za from the 7-Zip Extra: standalone console version lua from Lua for Windows  How to set up a mission You can clone the VEAF-Demo-Mission repository and use it as an example (or fork it and create a new mission from your fork). Then you should read the readme.md file in this repository. It will explain how you should setup your development environment. There is detailed documentation for all the modules:\n veafAssets veafCarrierOperations veafGrass veafUnits veafSpawn  "
},
{
	"uri": "https://veaf.github.io/VEAF-Mission-Creation-Tools/mission-programmer/",
	"title": "Mission programmer",
	"tags": [],
	"description": "",
	"content": "Introduction TODO\n"
},
{
	"uri": "https://veaf.github.io/VEAF-Mission-Creation-Tools/mission-maker/veafassets/",
	"title": "veafAssets",
	"tags": [],
	"description": "",
	"content": "Introduction This module creates a radio menu (VEAF / ASSETS) that allows the players to manage the mission air assets.\nFor each air asset, they can request information (is the asset alive ? What information has the mission maker set up - radio frequencies, TACANs, etc.), respawn the asset (and its eventual linked DCS groups, e.g. escort planes for a High Value Target), dispose of the asset (if set up by the mission maker).\nHow to set up a mission Let's start by saying that you can clone the VEAF-Demo-Mission repository and use it as an example (or fork it and create a new mission from your fork).\nLoad the script and its prerequisites In DCS mission editor, set up a \u0026ldquo;mission start\u0026rdquo; trigger that will :\n load the following scripts (in order) :  mist.lua (from the community folder) veaf.lua veafRadio.lua veafAssets.lua   run the following lua code : veafRadio.initialize();veafAssets.initialize(); load a new file that you'll write, and that will initialize the veafAsset script specifically for your mission ; usually it's called veafAssetsConfig.lua, and if you follow our model (VEAF-Demo-Mission) it's stored in the scripts folder of your mission.  How to configure the script in a mission The veafAssetsConfig.lua file will declare a table, listing all the assets in your mission along with the information you want the players to receive.\nHere's a annotated example:\nveafAssets.Assets = {\r-- list the assets common to all missions below\r {sort=1, name=\u0026#34;Arco\u0026#34;, description=\u0026#34;Arco (KC-135)\u0026#34;, information=\u0026#34;Tacan 11Y\\nVHF 130.4 Mhz\\nZone OUEST\u0026#34;, linked={\u0026#34;Arco-escort1\u0026#34;,\u0026#34;Arco-escort2\u0026#34;}},\r{sort=2, name=\u0026#34;Petrolsky\u0026#34;, description=\u0026#34;900 (IL-78M, RED)\u0026#34;, information=\u0026#34;VHF 267 Mhz\u0026#34;, linked=\u0026#34;Petrolsky-escort\u0026#34;}, {sort=3, name=\u0026#34;Mig-28\u0026#34;, description=\u0026#34;Mig-29x2 (dogfight zone, RED)\u0026#34;, disposable=true, information=\u0026#34;They spawn near N41° 09\u0026#39; 31\\\u0026#34;E043° 05\u0026#39; 08\\\u0026#34;\u0026#34;},\r}\rIn this code, we define 3 assets.\nFirst, Arco (the name attribute must contain the name of the group in DCS) is a tanker, described by \u0026ldquo;Arco (KC-135)\u0026rdquo; (the description field is the name that will appear in the radio menu). It has information that players can request freely (in the information attribute); it also has two linked DCS groups (not listed in the assets list, although they could be) : Arco-escort1 and Arco-escort2 (these are the name of the groups in DCS). When the players choose to respawn Arco, these linked groups will also automatically be respawned.\nPetrolsky has the same characteristics, except that it has a single linked group, described using the concise syntax (a single string instead if a list).\nMig-28 is an aggressor F5 (of course) which is disposable. It means that the player can choose not only to respawn it when they want to, but also to dispose of it when they don't want to play with it anymore. In this particular case (an AI aggressor plane), the mission maker should put it in the mission with the \u0026ldquo;Late activation\u0026rdquo; setting checked, so it is only spawned when players respawn it with this script.\nHow to use in a mission The radio menu will list all the assets defined in the veafAssets.Assets table, and for each asset add submenus :\n respawn the asset and its linked groups info shows information about the asset, if provided in the information tag dispose disposes of the asset if disposable is set to true  "
},
{
	"uri": "https://veaf.github.io/VEAF-Mission-Creation-Tools/mission-maker/veafcarrieroperations/",
	"title": "veafCarrierOperations",
	"tags": [],
	"description": "",
	"content": "Introduction This module creates a radio menu (VEAF / CARRIER OPERATIONS) that allows the players to manage the aircraft carriers (CV) in the mission, at runtime.\nFor each CV, they can get information (including ATC) and start/end carrier air operations (CAO). During CAO, the CV will sail into the wind at a speed and heading computed to get a specific wind speed right in front of the runway. A rescue helicopter (Pedro) and an emergency tanker can be placed in the mission and will be launched and recovered at appropriate times. After some time (45 or 90 minutes), it will automatically sail at flank speed to its initial position.\nHow to set up a mission Let's start by saying that you can clone the VEAF-Demo-Mission repository and use it as an example (or fork it and create a new mission from your fork).\nLoad the script and its prerequisites In DCS mission editor, set up a \u0026ldquo;mission start\u0026rdquo; trigger that will :\n load the following scripts (in order) :  mist.lua (from the community folder) veaf.lua veafRadio.lua veafCarrierOperations.lua   run the following lua code : veafRadio.initialize();veafCarrierOperations.initialize();  How to configure the script in a mission The name that is given to the CV is central to all the configuration of this module. For example, let's consider a John C. Stennis aircraft carrier steaming along its escort group.\n the DCS group is named \u0026ldquo;CSG-74 Stennis\u0026rdquo; (Carrier Strike Group) the aircraft carrier (DCS unit) is named \u0026ldquo;CVN-74 Stennis\u0026rdquo; (Cruiser Voler Nuclear, the acronym used by americans for their nuclear aircraft carriers) the Pedro helicopter (DCS unit) is aptly named \u0026ldquo;CVN-74 Stennis Pedro\u0026rdquo; the S3-B tanker (DCS unit) is named \u0026ldquo;CVN-74 Stennis S3B-Tanker\u0026rdquo;  The script first searches for aircraft carriers in the mission. For each aircraft carriers, it searches for units with the same name concatenated with \u0026quot; Pedro\u0026rdquo; (these are the rescue helos) and with \u0026quot; S3B-Tanker\u0026rdquo; (these are the emergency tankers)\nHow to use in a mission Use the radio menus to :\n start the carrier air operations (CAO) for a specific carrier, either for 45 or 90 minutes (available only when they are not yet started) stop the CAO (available only when they are started) request information (ATC, recovery bearing, etc.)  "
},
{
	"uri": "https://veaf.github.io/VEAF-Mission-Creation-Tools/mission-maker/veafgrass/",
	"title": "veafGrass",
	"tags": [],
	"description": "",
	"content": "Introduction This module helps place a Forward Armament and Refuel Point (FARP) in a mission. It also helps with grass runways (hence its name). The mission creator simply has to place one or few units in the DCS mission editor, and name them following a specific convention; the script will then automatically find and dress these units up at mission start.\nHow to set up a mission Let's start by saying that you can clone the VEAF-Demo-Mission repository and use it as an example (or fork it and create a new mission from your fork).\nLoad the script and its prerequisites In DCS mission editor, set up a \u0026ldquo;mission start\u0026rdquo; trigger that will :\n load the following scripts (in order) :  mist.lua (from the community folder) veaf.lua veafGrass.lua   run the following lua code : veafGrass.initialize();  Place the units in the mission There are two naming conventions that you can use with this script:\n units with \u0026ldquo;FARP \u0026quot; in their name will trigger the creation of a FARP; tents and other static objects like generators, ammo dumps, a windsock will be placed around the unit; supply vehicles (mandatory for rearming, refueling and getting external power) will be spawned; the FARP will also be added to the named points database (see namedPoints) units with \u0026ldquo;GRASS_RUNWAY\u0026rdquo; in their name will trigger the creation of a grass runway by replicating the unit to form two parallel lines, add a guard tower, a windsock and also add the grass runway to the named points database (see namedPoints)  How to use in a mission Nothing to do ; at mission start the script will automatically run, and then the FARPs and grass runways will be available for the players.\n"
},
{
	"uri": "https://veaf.github.io/VEAF-Mission-Creation-Tools/mission-maker/veafspawn/",
	"title": "veafSpawn",
	"tags": [],
	"description": "",
	"content": "Introduction This module allows the user to spawn several type of DCS objects in a running mission ; it can spawn :\n groups that have been defined with the veafUnits module units that are defined in DCS (either via their veafUnits alias, or their DCS type name dynamic groups that use templates defined with the veafUnits module, but can be configured and are randomized convoys that can go from a point to another, and be tracked and managed with radio commands cargo statics and logistic points that are registered with CTLD and can be transported via helicopter bombs that can destroy scenery, units and groups (even client aircrafts and vehicles) smoke and illumination flares  It also provides commands to :\n teleport an existing unit or group to a different location cleanly destroy a unit or several units inside a defined circle (without leaving a smoking wreck behind, that is)  How to set up a mission Let's start by saying that you can clone the VEAF-Demo-Mission repository and use it as an example (or fork it and create a new mission from your fork).\nLoad the script and its prerequisites In DCS mission editor, set up a \u0026ldquo;mission start\u0026rdquo; trigger that will :\n load the following scripts (in order) :  mist.lua (from the community folder) veaf.lua veafUnits.lua veafMarkers.lua veafRadio.lua veafCasMission.lua veafSpawn.lua   run the following lua code : veafUnits.initialize();veafMarkers.initialize();veafRadio.initialize();veafCasMission.initialize();veafSpawn.initialize();  How to use in a mission Markers The veafSpawn module is managed by creating markers, which names should follow a specific syntax (see next headings). This syntax is composed of a mandatory instruction (at the beginning) and mandator or optional (depending on the instruction) parameters separated by commas. Example : _spawn group, name US infgroup, country USA\nFor more informations about markers, see veafMarkers\nSpawn units and groups The _spawn instruction can spawn units (_spawn unit) or groups (_spawn groups). Both commands accept the same set of mandatory (bold) or optional (bold italic) parameters:\n name is the name of the unit or group in the VEAF and DCS databases; e.g. _spawn unit, name sa6 country (default RUSSIA) is the name of the country this unit will belong to; e.g. _spawn group, name US infgroup, country USA speed (default 0) is the speed of the unit/group, when it spawns. For most units/groups it will reset to its predefined orders; e.g. _spawn unit, name sa6, speed 15 altitude or alt (default 0) is the altitude of the unit/group (same remarks as speed); e.g. _spawn unit, name sa6, alt 15 heading or hdg (default 0) is the heading of the unit/group (same remarks as speed); e.g. _spawn unit, name sa6, hdg 270  Some parameters are specific to the _spawn unit instruction:\n unitName (default is the unit display name in DCS suffixed with a numeric counter) will be the name this unit will have in the DCS mission (not to be mistaken with the unit type parameter, name); e.g. _spawn unit, name sa6, unitname My proud SA6  A special instruction will spawn a specific unit with a JTAC role, and set it as invisible and invincible: _spawn jtac. It has a specific parameter:\n laser (default 1688) can be used to choose a laser code for the JTAC ; e.g. _spawn jtac, laser 1681  Some parameters are specific to the _spawn group instruction:\n  spacing (default 5) is used to add space between a group's units (see veafUnits)\n  isconvoy (default false) if set, makes the group behave like a convoy\n dest (mandatory in this case) the named point where the convoy must go (see veafNamedPoints) patrol (default false) if set, makes the group go back and forth between its spawn point and its destination point offroad (default false) if set, the group will not try and use roads    Spawn dynamic groups The _spawn instruction can also spawn dynamic groups; these groups are randomized, and parameters can be used to choose several aspects of this randomization. The type of the dynamic group is linked to the instruction itself :\n _spawn infantrygroup will spawn an infantry section (an armored personnel carrier with an infantry section and optional air defense - manpads)  defense (default 1) will determine the air defense generated for this group:  if 0: no manpad 1..3: between 1 and defense older manpad systems 4..5: between 1 and defense-2 modern manpad systems   armor (default 1) will determine the personnel carrier vehicle:  if 0: a M 818 (BLUE) or a GAZ-3308 (RED) truck 1..3: a IFV Boman (BLUE) or a BTR-80 (RED) 4..5: a M-2 Bradley (BLUE) or a BMP-1 (RED)     _spawn armorgroup will spawn an armor platoon (3-6 armored vehicles with optional escorting air defence systems)  defense (default 1) will determine the air defense generated for this group:  if 0: no air defense 1..3: a Gepard (BLUE) or a ZSU-23-4 Shilka (RED) 4..5: an M6 Linebacker (BLUE) or a 2S6 Tunguska (RED)   armor (default 1) will determine the personnel carrier vehicle:  0..2: random choice between M-2 Bradley, IFV MCV-80, IFV Boman (BLUE) or BMP-1, BMD-1, BRDM-2 (RED) 3: random choice between M-2 Bradley (66%), M-60 (33%) (BLUE) or BMP-1, BMP-2, T-55 (RED) 4: random choice between M-2 Bradley (50%), M-60 (25%), Leopard-2 (25%) (BLUE) or BMP-1, BMP-2, T-55, T-72 (RED) 5: random choice between M-2 Bradley (50%), MBT Leopard1A3 (25%), M-1 Abrams (25%) (BLUE) or BMP-2, BMP-3, T-80UD, T-90 (RED)     _spawn samgroup will spawn an air defense battery (multiple air defense launchers/systems, a search radar and support vehicles)  defense the group will be spawned from the veafUnit template called \u0026ldquo;generateAirDefenseGroup--\u0026rdquo; where is either RED or BLUE and is the defense parameter value   _spawn transportgroup will spawn a transport company (several trucks with optional escorting air defence systems)  defense (default 1) will determine the air defense generated for this group, one of these air defense system for every ten trucks:  if 0: no air defense 1: a Gepard (BLUE) or a Ural-375 ZU-23 (RED) 2: a Gepard (BLUE) or a ZSU-23-4 Shilka (RED) 3: an M6 Linebacker (BLUE) or a 2S6 Tunguska (RED) 4..5: an M6 Linebacker and a Gepard (BLUE) or a 2S6 Tunguska and a ZSU-23-4 Shilka (RED)   size (default 10) the number of trucks that will be spawned   _spawn combatgroup will spawn a full combat group, composed of multiple infantry groups, multiple armor platoons, several transport companies and 1 or 2 air defense groups  defense (default 1) will be used for every generated group (see above) armor (default 1) will be used for every generated group (see above) size (default 10) will be used for every generated group (see above) and condition the groups that will be generated:  between size-2 and size+1 infantry groups between size-2 and size+1 armor platoons 1 or 2 air defense groups if defense is not 0 between 1 and size transport companies      Aside from the specific parameters already listed above, there are common parameters:\n side (default RED) is the coalition the group(s) will belong to (RED or BLUE) country (default USA for side=blue, RUSSIA for side=red) is the country the group(s) will belong to heading (default 0) is the global heading of the groups; units in the group will have their individual heading (in the template definition) adapted to be relative to this global heading spacing (default 5) is used to add space between a group's units (see veafUnits), but also to add space between the groups  Spawn convoys The _spawn convoy instruction will generate a dynamic convoy, and send it on its route to a named point (see veafNamedPoints). The convoys are tracked and managed in the VEAF SPAWN radio menu. It is possible to find out if a convoy still exists (or was destroyed entirely), find out where it is (or between which points it travels) thanks to smoke markers, or dispose of a convoy. The convoy will be composed of a transport company (see _spawn transportgroup above), This instruction accepts several parameters:\n"
},
{
	"uri": "https://veaf.github.io/VEAF-Mission-Creation-Tools/mission-maker/veafunits/",
	"title": "veafUnits",
	"tags": [],
	"description": "",
	"content": "Introduction This module allows the user to define groups that can be spawned in a mission using either the veafSpawn, the veafInterpreter or the veafCombatZone modules. It is also possible to define aliases for units that will be used in groups, or spawned directly.\nHow to set up a mission Let's start by saying that you can clone the VEAF-Demo-Mission repository and use it as an example (or fork it and create a new mission from your fork).\nLoad the script and its prerequisites In DCS mission editor, set up a \u0026ldquo;mission start\u0026rdquo; trigger that will :\n load the following scripts (in order) :  mist.lua (from the community folder) veaf.lua veafUnits.lua any module that you'll use to spawn the groups (veafSpawn, veafInterpreter or veafCombatZone)   run the following lua code : veafUnits.initialize();  You can use the groups defined in the veafUnits.lua script, or define your own groups by creating a mission-specific file :\n load a new file that you'll write, and that will add entries in the veafUnits databases specifically for your mission ; usually it's called veafUnitsConfig.lua, and if you follow our model (VEAF-Demo-Mission) it's stored in the scripts folder of your mission.  How to configure the script in a mission The veafUnitsConfig.lua file will add entries to the veafUnits.UnitsDatabase and/or veafUnits.GroupsDatabase tables\nHere's a annotated example:\ntable.insert(veafUnits.UnitsDatabase, {\raliases = {\u0026#34;sa15\u0026#34;, \u0026#34;sa-15\u0026#34;},\runitType = \u0026#34;Tor 9A331\u0026#34;,\r})\rIn this code, we add aliases for the Tor SAM system (more on the syntax later).\ntable.insert(veafUnits.GroupsDatabase, {\raliases = {\u0026#34;rapier_optical\u0026#34;, \u0026#34;rpo\u0026#34;},\rgroup = {\rdisposition = { h= 3, w= 5},\runits = {{\u0026#34;rapier_fsa_optical_tracker_unit\u0026#34;, cell = 13}, {\u0026#34;rapier_fsa_launcher\u0026#34;, cell = 1}, {\u0026#34;rapier_fsa_launcher\u0026#34;, cell = 5}},\rdescription = \u0026#34;Rapier SAM site\u0026#34;,\rgroupName = \u0026#34;Rapier\u0026#34;\r},\r})\rIn this code, we add a group called rpo or rapier_optical that contains 3 units (more on the syntax later).\nUnit aliases syntax The syntax of an entry in the veafUnits.UnitsDatabase is quite simple. Example :\n{\raliases = {\u0026#34;sa15\u0026#34;, \u0026#34;sa-15\u0026#34;},\runitType = \u0026#34;Tor 9A331\u0026#34;,\r}\rAn entry is composed of 2 elements :\n the aliases keyword defines a list of aliases that can be used to refer to the unit the unitType keyword specifies which DCS unit is referred to from the list defined in dcsUnits.lua (not very up-to-date).  Group definition syntax A group is a list of units that are used together to form a usable battle group.\nIt has a layout template, used to make the group units spawn at the correct place and heading. The syntax of an entry in the veafUnits.GroupsDatabase is much more complex than a simple alias. Example :\n{\raliases = {\u0026#34;Tarawa\u0026#34;},\rgroup = {\rdisposition = { h = 3, w = 3},\runits = { {\u0026#34;tarawa\u0026#34;, 2}, {\u0026#34;PERRY\u0026#34;, 7}, {\u0026#34;PERRY\u0026#34;, 9} },\rdescription = \u0026#34;Tarawa battle group\u0026#34;,\rgroupName = \u0026#34;Tarawa\u0026#34;,\r}\r}\rSyntax aliases The aliases keyword defines a list of aliases that can be used to refer to the group.\nExample :\naliases = {\u0026#34;sa2\u0026#34;, \u0026#34;sa-2\u0026#34;, \u0026#34;fs\u0026#34;},\rdisposition The disposition keyword defines the group layout template (see explanation of group layouts below).\nExample :\ndisposition = { h= 6, w= 8},\runits The units keyword defines a list of all the units composing the group.\nExample :\nunits = {\r{\u0026#34;IFV Hummer\u0026#34;, cell = 1, fitToUnit},\r{\u0026#34;Truck Predator GCS\u0026#34;, cell = 3, hdg = 225},\r{\u0026#34;Truck M 818\u0026#34;, number = 4, random},\r{\u0026#34;Truck M978 HEMTT Tanker\u0026#34;, number = {min=0, max=3}, random},\r},\r the first element of the unit table is always the unit type, either from the dcsUnits database, or from an alias in veafUnits.UnitsDatabase. the position of the unit is either specified with the cell parameter (containing the cell number), or left as random if the cell keyword is omitted. the random parameter, if set, means that the unit will be placed randomly in the cell, leaving a one unit size margin around. the hdg parameter, if set, fixes the unit heading (in degrees, from 0 to 359); when not set, unit heading is random. the number parameter is used to spawn multiple units in several cells; it cannot be combined with the cell parameter, of course, and can either be a fixed number or an interval from which the actual number of units will be chosen randomly. fitToUnit, when specified, makes the cell shrink around the unit ; it will not be a square but a rectangle of the unit's exact size (plus the spacing, if set)  description the description keyword contains a human-friendly name for the group that will be used in lists (e.g. in the list all groups radio menu of veafSpawn).\ngroupName the groupName keyword defines the DCS group name used when spawning this group (will be completed with a numerical suffix)\nGroup layout grid and placement algorithm A group template is defined relative to a grid, composed of cells, numbered from left to right and top to bottom :\nThe units in the group will be spawned in their respective cell, or sequentially from the top-left cell if no preferred cell is set.\nLet's describe the algorithm so everything is clear.\nStep 1 First, a layout defines the number of cells (height and width) for the group. At the moment the cells measure by default 10m x 10m. The disposition keyword defines this layout. Here's an example with the Tarawa group defined above :\ndisposition = { h = 3, w = 3},\rStep 2 Then, when a unit is placed in a cell, this cell size grows to accomodate the unit's size.\nWe can add a spacing parameter (in the spawn method call) if needed, to allow for some freedom inside the cells. When set, the size of the cell will be expanded by the size of the unit times the spacing parameter.\nLet's continue with our example ; here the Tarawa itself is placed in cell #2 :\nunits = { {\u0026#34;tarawa\u0026#34;, 2} ... },\rStep 3 This process continues until all the units are placed.\nIn our example, we still have to place 2 Perry frigates in cells #7 and #9 :\nunits = { ... {\u0026#34;PERRY\u0026#34;, 7}, {\u0026#34;PERRY\u0026#34;, 9} },\rStep 4 At the end of the process, we need to compute the size of the rectangle that contains all the group units.\nContinuing with our example :\nAnd we can actually spawn all the units at the center of each cell, with a random variation if the random parameter was set\nActual examples A seemingly realistic russian air defense batteries {\raliases = {\u0026#34;RU-SAM-Shilka-Battery\u0026#34;},\rgroup = {\rdisposition = { h= 5, w= 5},\runits = {\r-- the search radar\r {\u0026#34;Dog Ear radar\u0026#34;, cell = 13}, -- the actual air defense units\r {\u0026#34;ZSU-23-4 Shilka\u0026#34;, hdg = 0, random}, {\u0026#34;ZSU-23-4 Shilka\u0026#34;, hdg = 90, random}, {\u0026#34;ZSU-23-4 Shilka\u0026#34;, hdg = 180, random}, {\u0026#34;ZSU-23-4 Shilka\u0026#34;, hdg = 270, random},\r-- a supply truck or three\r {\u0026#34;Transport Ural-4320-31 Armored\u0026#34;, number = {min=1, max=3}, random},\r},\rdescription = \u0026#34;ZSU-23-4 battery\u0026#34;,\rgroupName = \u0026#34;ZSU-23-4 battery\u0026#34;\r},\r},\rA quite random, but nonetheless deadly air defense group {\raliases = {\u0026#34;generateAirDefenseGroup-RED-5\u0026#34;},\rhidden,\rgroup = {\rdisposition = { h= 7, w= 7},\runits = {\r-- the search radar\r {\u0026#34;Dog Ear radar\u0026#34;, random}, -- Tor battery\r {\u0026#34;Tor 9A331\u0026#34;, hdg = 0, random}, {\u0026#34;Tor 9A331\u0026#34;, hdg = 90, random}, {\u0026#34;Tor 9A331\u0026#34;, hdg = 180, random}, {\u0026#34;Tor 9A331\u0026#34;, hdg = 270, random}, -- Some SA13\r {\u0026#34;Strela-10M3\u0026#34;, number = {min=2, max=4}, random},\r-- Some Shilkas\r {\u0026#34;ZSU-23-4 Shilka\u0026#34;, number = {min=2, max=4}, random},\r-- a supply truck or three\r {\u0026#34;Transport Ural-4320-31 Armored\u0026#34;, number = {min=1, max=3}, random}, },\rdescription = \u0026#34;generateAirDefenseGroup-RED-5\u0026#34;,\rgroupName = \u0026#34;generateAirDefenseGroup-RED-5\u0026#34;,\r},\r},\rA very simple infantry group {\raliases = {\u0026#34;US infgroup\u0026#34;},\rgroup = {\rdisposition = { h = 5, w = 5},\runits = {{\u0026#34;IFV Hummer\u0026#34;, number = {min=1, max=2}, random},{\u0026#34;INF Soldier M249\u0026#34;, number = {min=1, max=2}, random},{\u0026#34;INF Soldier M4 GRG\u0026#34;, number = {min=2, max=4}, random},{\u0026#34;INF Soldier M4\u0026#34;, number = {min=6, max=15}, random}},\rdescription = \u0026#34;US infantry group\u0026#34;,\rgroupName = \u0026#34;US infantry group\u0026#34;,\r},\r},\rHow to use in a mission Depending on the mission, it is possible to spawn groups and units defined with this module by using the commands in the veafSpawn, the veafInterpreter and the veafCombatZone modules. See their specific documentation to find out how.\n"
},
{
	"uri": "https://veaf.github.io/VEAF-Mission-Creation-Tools/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "VEAF Mission Creation Tools - Documentation TODO\nQuestions, feature requests, bug reports ? TODO forum, github, mail\nHall of fame  David \u0026ldquo;Zip\u0026rdquo; Pierron, VEAF Frédéric \u0026ldquo;Coubystark\u0026rdquo; Coubard, VEAF \u0026ldquo;Mitch\u0026rdquo;, VEAF  "
},
{
	"uri": "https://veaf.github.io/VEAF-Mission-Creation-Tools/mission-maker/group-list/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "Liste des groupes d'unités utilisables dans la mission d'entrainement Groupes définis dans veafUnits    Nom Description Aliases     SA2 SA-2 SAM site \u0026quot;sa2\u0026rdquo;, \u0026ldquo;sa-2\u0026rdquo;, \u0026ldquo;fs\u0026rdquo;   Rapier Rapier SAM site \u0026quot;rapier_optical\u0026rdquo;, \u0026ldquo;rpo\u0026rdquo;   Rapier-radar Rapier SAM site with radar \u0026quot;rapier_radar\u0026rdquo;, \u0026ldquo;rpr\u0026rdquo;   SA3 SA-3 SAM site \u0026quot;sa3\u0026rdquo;, \u0026ldquo;sa-3\u0026rdquo;, \u0026ldquo;lb\u0026rdquo;   SA6 SA-6 SAM site \u0026quot;sa6\u0026rdquo;, \u0026ldquo;sa-6\u0026rdquo;, \u0026ldquo;06\u0026rdquo;   SA11 SA-11 SAM site \u0026quot;sa11\u0026rdquo;, \u0026ldquo;sa-11\u0026rdquo;, \u0026ldquo;sd\u0026rdquo;   S300 S300 SAM site \u0026quot;sa10\u0026rdquo;, \u0026ldquo;s300\u0026rdquo;, \u0026ldquo;bb\u0026rdquo;   Mechanized infantry section Mechanized infantry section with APCs \u0026quot;infantry section\u0026rdquo;, \u0026ldquo;infsec\u0026rdquo;   Roland Roland SAM site \u0026quot;roland\u0026rdquo;, \u0026ldquo;rd\u0026rdquo;, \u0026ldquo;mim-115\u0026rdquo;   Hawk Hawk SAM site \u0026quot;hawk\u0026rdquo;, \u0026ldquo;ha\u0026rdquo;, \u0026ldquo;mim-23\u0026rdquo;   Patriot Patriot SAM site \u0026quot;patriot\u0026rdquo;, \u0026ldquo;pa\u0026rdquo;, \u0026ldquo;mim-104\u0026rdquo;    "
},
{
	"uri": "https://veaf.github.io/VEAF-Mission-Creation-Tools/mission-maker/unit-list/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "Liste des unités utilisables dans la mission d'entrainement Unités définies dans DCS Toutes les unités existant dans DCS peuvent être placées par veaf spawn unit ou utilisées dans la définition d'un groupe\nUnités définies dans veafUnits    Nom Description Aliases     SA 9 Strela-1 9P31 sa9, sa-9   SA 13 Strela-10M3 sa13, sa-13   SA 6 Kub 2P25 launcher sa6, sa-6   SA 8 Osa 9A33 launcher sa8, sa-8   SA 15 Tor 9A331 sa15, sa-15   Shilka ZSU-23-4 Shilka AAA shilka   Manpad SA-18 Igla-S manpad sa18, sa-18, manpad    "
},
{
	"uri": "https://veaf.github.io/VEAF-Mission-Creation-Tools/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://veaf.github.io/VEAF-Mission-Creation-Tools/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]